{
  "address": "0x53e2B00C4b2e00FF1CB8B7Bee44927793cAE01F3",
  "abi": [
    {
      "constant": true,
      "inputs": [
        {
          "name": "_interfaceId",
          "type": "bytes4"
        }
      ],
      "name": "supportsInterface",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "hasInitialized",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MAX_VESTINGS_PER_ADDRESS",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_holder",
          "type": "address"
        }
      ],
      "name": "spendableBalanceOf",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "wrappableToken",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_receiver",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        },
        {
          "name": "_start",
          "type": "uint64"
        },
        {
          "name": "_cliff",
          "type": "uint64"
        },
        {
          "name": "_vested",
          "type": "uint64"
        },
        {
          "name": "_revokable",
          "type": "bool"
        }
      ],
      "name": "assignVested",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_script",
          "type": "bytes"
        }
      ],
      "name": "getEVMScriptExecutor",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getRecoveryVault",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_recipient",
          "type": "address"
        },
        {
          "name": "_vestingId",
          "type": "uint256"
        }
      ],
      "name": "getVesting",
      "outputs": [
        {
          "name": "amount",
          "type": "uint256"
        },
        {
          "name": "start",
          "type": "uint64"
        },
        {
          "name": "cliff",
          "type": "uint64"
        },
        {
          "name": "vesting",
          "type": "uint64"
        },
        {
          "name": "revokable",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_receiver",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "mint",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "CHANGE_CONTROLLER_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_from",
          "type": "address"
        },
        {
          "name": "_to",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "onTransfer",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "forwarderType",
      "outputs": [
        {
          "name": "",
          "type": "uint8"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_hook",
          "type": "address"
        }
      ],
      "name": "registerHook",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_holder",
          "type": "address"
        },
        {
          "name": "_time",
          "type": "uint256"
        }
      ],
      "name": "transferableBalance",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "hooksLength",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "allowRecoverability",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "appId",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ISSUE_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "hooks",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getInitializationBlock",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "vestingsLengths",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        }
      ],
      "name": "transferToVault",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_holder",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "burn",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_sender",
          "type": "address"
        },
        {
          "name": "_role",
          "type": "bytes32"
        },
        {
          "name": "_params",
          "type": "uint256[]"
        }
      ],
      "name": "canPerform",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "getEVMScriptRegistry",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "ASSIGN_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_hookId",
          "type": "uint256"
        }
      ],
      "name": "revokeHook",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "BURN_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_receiver",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "assign",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [
        {
          "name": "_sender",
          "type": "address"
        },
        {
          "name": "",
          "type": "bytes"
        }
      ],
      "name": "canForward",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "issue",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "kernel",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_newController",
          "type": "address"
        }
      ],
      "name": "changeTokenController",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_evmScript",
          "type": "bytes"
        }
      ],
      "name": "forward",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_holder",
          "type": "address"
        },
        {
          "name": "_spender",
          "type": "address"
        },
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "onApprove",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "unwrap",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isPetrified",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "MINT_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_amount",
          "type": "uint256"
        }
      ],
      "name": "wrap",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "maxAccountTokens",
      "outputs": [
        {
          "name": "",
          "type": "uint256"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "REVOKE_VESTINGS_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_token",
          "type": "address"
        },
        {
          "name": "_wrappableToken",
          "type": "address"
        },
        {
          "name": "_transferable",
          "type": "bool"
        },
        {
          "name": "_maxAccountTokens",
          "type": "uint256"
        }
      ],
      "name": "initialize",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "name": "proxyPayment",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": true,
      "stateMutability": "payable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "SET_HOOK_ROLE",
      "outputs": [
        {
          "name": "",
          "type": "bytes32"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": false,
      "inputs": [
        {
          "name": "_holder",
          "type": "address"
        },
        {
          "name": "_vestingId",
          "type": "uint256"
        }
      ],
      "name": "revokeVesting",
      "outputs": [],
      "payable": false,
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "token",
      "outputs": [
        {
          "name": "",
          "type": "address"
        }
      ],
      "payable": false,
      "stateMutability": "view",
      "type": "function"
    },
    {
      "constant": true,
      "inputs": [],
      "name": "isForwarder",
      "outputs": [
        {
          "name": "",
          "type": "bool"
        }
      ],
      "payable": false,
      "stateMutability": "pure",
      "type": "function"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "wrappableToken",
          "type": "address"
        }
      ],
      "name": "TokenManagerInitialized",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "vestingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "NewVesting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "receiver",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "vestingId",
          "type": "uint256"
        },
        {
          "indexed": false,
          "name": "nonVestedAmount",
          "type": "uint256"
        }
      ],
      "name": "RevokeVesting",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "executor",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "script",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "input",
          "type": "bytes"
        },
        {
          "indexed": false,
          "name": "returnData",
          "type": "bytes"
        }
      ],
      "name": "ScriptResult",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "name": "vault",
          "type": "address"
        },
        {
          "indexed": true,
          "name": "token",
          "type": "address"
        },
        {
          "indexed": false,
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "RecoverToVault",
      "type": "event"
    }
  ],
  "transactionHash": "0x8b8047fa81350be0bc96ca75b15c8066312e718e75c1b4ebf70ba1857f9dac6f",
  "receipt": {
    "to": "0x4e59b44847b379578588920cA78FbF26c0B4956C",
    "from": "0x5b0F8D8f47E3fDF7eE1c337AbCA19dBba98524e6",
    "contractAddress": null,
    "transactionIndex": 23,
    "gasUsed": "4487512",
    "logsBloom": "0x
    "blockHash": "0x90ca5094cd05d36b0fdd68b8e79e04144b8cf0ca7612b8594244c3279ed91568",
    "transactionHash": "0x8b8047fa81350be0bc96ca75b15c8066312e718e75c1b4ebf70ba1857f9dac6f",
    "logs": [
      {
        "transactionIndex": 23,
        "blockNumber": 20259376,
        "transactionHash": "0x8b8047fa81350be0bc96ca75b15c8066312e718e75c1b4ebf70ba1857f9dac6f",
        "address": "0x0000000000000000000000000000000000001010",
        "topics": [
          "0x4dfe1bbbcf077ddc3e01291eea2d5c70c2b422b415d95645b9adcfd678cb1d63",
          "0x0000000000000000000000000000000000000000000000000000000000001010",
          "0x0000000000000000000000005b0f8d8f47e3fdf7ee1c337abca19dbba98524e6",
          "0x000000000000000000000000b79fad4ca981472442f53d16365fdf0305ffd8e9"
        ],
        "data": "0x00000000000000000000000000000000000000000000000001de490d388f20000000000000000000000000000000000000000000000000007bb43fffb77284000000000000000000000000000000000000000000000062ee8b1d88e121eaa95a00000000000000000000000000000000000000000000000079d5f6f27ee364000000000000000000000000000000000000000000000062ee8cfbd1ee5a79c95a",
        "logIndex": 99,
        "blockHash": "0x90ca5094cd05d36b0fdd68b8e79e04144b8cf0ca7612b8594244c3279ed91568"
      }
    ],
    "blockNumber": 20259376,
    "cumulativeGasUsed": "8253671",
    "status": 1,
    "byzantium": true
  },
  "args": [],
  "solcInputHash": "cb027f9f39dd67a3f31757a2a391c6a7",
  "metadata": "{\"compiler\":{\"version\":\"0.4.24+commit.e67f0147\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"constant\":true,\"inputs\":[{\"name\":\"_interfaceId\",\"type\":\"bytes4\"}],\"name\":\"supportsInterface\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hasInitialized\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MAX_VESTINGS_PER_ADDRESS\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"}],\"name\":\"spendableBalanceOf\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"wrappableToken\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"},{\"name\":\"_start\",\"type\":\"uint64\"},{\"name\":\"_cliff\",\"type\":\"uint64\"},{\"name\":\"_vested\",\"type\":\"uint64\"},{\"name\":\"_revokable\",\"type\":\"bool\"}],\"name\":\"assignVested\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_script\",\"type\":\"bytes\"}],\"name\":\"getEVMScriptExecutor\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getRecoveryVault\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_recipient\",\"type\":\"address\"},{\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"getVesting\",\"outputs\":[{\"name\":\"amount\",\"type\":\"uint256\"},{\"name\":\"start\",\"type\":\"uint64\"},{\"name\":\"cliff\",\"type\":\"uint64\"},{\"name\":\"vesting\",\"type\":\"uint64\"},{\"name\":\"revokable\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"mint\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"CHANGE_CONTROLLER_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_from\",\"type\":\"address\"},{\"name\":\"_to\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onTransfer\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"forwarderType\",\"outputs\":[{\"name\":\"\",\"type\":\"uint8\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hook\",\"type\":\"address\"}],\"name\":\"registerHook\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_time\",\"type\":\"uint256\"}],\"name\":\"transferableBalance\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"hooksLength\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"allowRecoverability\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"appId\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ISSUE_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"hooks\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getInitializationBlock\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"vestingsLengths\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"}],\"name\":\"transferToVault\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"burn\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"_role\",\"type\":\"bytes32\"},{\"name\":\"_params\",\"type\":\"uint256[]\"}],\"name\":\"canPerform\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"getEVMScriptRegistry\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"ASSIGN_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_hookId\",\"type\":\"uint256\"}],\"name\":\"revokeHook\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"BURN_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_receiver\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"assign\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[{\"name\":\"_sender\",\"type\":\"address\"},{\"name\":\"\",\"type\":\"bytes\"}],\"name\":\"canForward\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"issue\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"kernel\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_newController\",\"type\":\"address\"}],\"name\":\"changeTokenController\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_evmScript\",\"type\":\"bytes\"}],\"name\":\"forward\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_spender\",\"type\":\"address\"},{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"onApprove\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"unwrap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isPetrified\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"MINT_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_amount\",\"type\":\"uint256\"}],\"name\":\"wrap\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"maxAccountTokens\",\"outputs\":[{\"name\":\"\",\"type\":\"uint256\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"REVOKE_VESTINGS_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_token\",\"type\":\"address\"},{\"name\":\"_wrappableToken\",\"type\":\"address\"},{\"name\":\"_transferable\",\"type\":\"bool\"},{\"name\":\"_maxAccountTokens\",\"type\":\"uint256\"}],\"name\":\"initialize\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"\",\"type\":\"address\"}],\"name\":\"proxyPayment\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":true,\"stateMutability\":\"payable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"SET_HOOK_ROLE\",\"outputs\":[{\"name\":\"\",\"type\":\"bytes32\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":false,\"inputs\":[{\"name\":\"_holder\",\"type\":\"address\"},{\"name\":\"_vestingId\",\"type\":\"uint256\"}],\"name\":\"revokeVesting\",\"outputs\":[],\"payable\":false,\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"token\",\"outputs\":[{\"name\":\"\",\"type\":\"address\"}],\"payable\":false,\"stateMutability\":\"view\",\"type\":\"function\"},{\"constant\":true,\"inputs\":[],\"name\":\"isForwarder\",\"outputs\":[{\"name\":\"\",\"type\":\"bool\"}],\"payable\":false,\"stateMutability\":\"pure\",\"type\":\"function\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"wrappableToken\",\"type\":\"address\"}],\"name\":\"TokenManagerInitialized\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"NewVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"receiver\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"vestingId\",\"type\":\"uint256\"},{\"indexed\":false,\"name\":\"nonVestedAmount\",\"type\":\"uint256\"}],\"name\":\"RevokeVesting\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"executor\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"script\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"input\",\"type\":\"bytes\"},{\"indexed\":false,\"name\":\"returnData\",\"type\":\"bytes\"}],\"name\":\"ScriptResult\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"name\":\"vault\",\"type\":\"address\"},{\"indexed\":true,\"name\":\"token\",\"type\":\"address\"},{\"indexed\":false,\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"RecoverToVault\",\"type\":\"event\"}],\"devdoc\":{\"methods\":{\"allowRecoverability(address)\":{\"details\":\"Disable recovery escape hatch for own token,     as the it has the concept of issuing tokens without assigning them\"},\"assign(address,uint256)\":{\"params\":{\"_amount\":\"Number of tokens transferred\",\"_receiver\":\"The address receiving the tokens\"}},\"assignVested(address,uint256,uint64,uint64,uint64,bool)\":{\"params\":{\"_amount\":\"Number of tokens vested\",\"_cliff\":\"Date when the initial portion of tokens are transferable\",\"_receiver\":\"The address receiving the tokens, cannot be Token Manager itself\",\"_revokable\":\"Whether the vesting can be revoked by the Token Manager\",\"_start\":\"Date the vesting calculations start\",\"_vested\":\"Date when all tokens are transferable\"}},\"burn(address,uint256)\":{\"params\":{\"_amount\":\"Number of tokens being burned\",\"_holder\":\"Holder of tokens being burned\"}},\"canPerform(address,bytes32,uint256[])\":{\"details\":\"Check whether an action can be performed by a sender for a particular role on this app\",\"params\":{\"_params\":\"Permission params for the role\",\"_role\":\"Role on this app\",\"_sender\":\"Sender of the call\"},\"return\":\"Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet.\"},\"changeTokenController(address)\":{\"params\":{\"_newController\":\"Address to transfer control of the token\"}},\"forward(bytes)\":{\"details\":\"IForwarder interface conformance. Forwards any token holder action.\",\"params\":{\"_evmScript\":\"Script being executed\"}},\"forwarderType()\":{\"details\":\"Tell the forwarder type\",\"return\":\"Always 1 (ForwarderType.NO_CONTEXT)\"},\"getInitializationBlock()\":{\"return\":\"Block number in which the contract was initialized\"},\"getRecoveryVault()\":{\"details\":\"Get the recovery vault for the app\",\"return\":\"Recovery vault address for the app\"},\"hasInitialized()\":{\"return\":\"Whether the contract has been initialized by the time of the current block\"},\"initialize(address,address,bool,uint256)\":{\"params\":{\"_maxAccountTokens\":\"Maximum amount of tokens an account can have (0 for infinite tokens)\",\"_token\":\"MiniMeToken address for the managed token (Token Manager instance must be already set as the token controller)\",\"_transferable\":\"whether the token can be transferred by holders\",\"_wrappableToken\":\"Token which can be wrapped/unwrapped to generate an equal number of the MiniMeToken. Set to address(0) to disable.\"}},\"issue(uint256)\":{\"params\":{\"_amount\":\"Number of tokens minted\"}},\"mint(address,uint256)\":{\"params\":{\"_amount\":\"Number of tokens minted\",\"_receiver\":\"The address receiving the tokens, cannot be the Token Manager itself (use `issue()` instead)\"}},\"onApprove(address,address,uint256)\":{\"details\":\"Notifies the controller about an approval allowing the controller to react if desired     Initialization check is implicitly provided by `onlyToken()`.\",\"return\":\"False if the controller does not authorize the approval\"},\"proxyPayment(address)\":{\"details\":\"Called when ether is sent to the MiniMe Token contract     Initialization check is implicitly provided by `onlyToken()`.\",\"return\":\"True if the ether is accepted, false for it to throw\"},\"registerHook(address)\":{\"params\":{\"_hook\":\"Contract that will be used as Token Manager hook\"}},\"revokeHook(uint256)\":{\"params\":{\"_hookId\":\"Position of the hook to be removed\"}},\"revokeVesting(address,uint256)\":{\"params\":{\"_holder\":\"Address whose vesting to revoke\",\"_vestingId\":\"Numeric id of the vesting\"}},\"supportsInterface(bytes4)\":{\"details\":\"Query if a contract implements a certain interface\",\"params\":{\"_interfaceId\":\"The interface identifier being queried, as specified in ERC-165\"},\"return\":\"True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\"},\"transferToVault(address)\":{\"params\":{\"_token\":\"Token balance to be sent to recovery vault.\"}},\"unwrap(uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to unwrap\"}},\"wrap(uint256)\":{\"params\":{\"_amount\":\"Amount of tokens to wrap\"}}}},\"userdoc\":{\"methods\":{\"assign(address,uint256)\":{\"notice\":\"Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings\"},\"assignVested(address,uint256,uint64,uint64,uint64,bool)\":{\"notice\":\"Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings with a `_revokable : 'revokable' : ''` vesting starting at `@formatDate(_start)`, cliff at `@formatDate(_cliff)` (first portion of tokens transferable), and completed vesting at `@formatDate(_vested)` (all tokens transferable)\"},\"burn(address,uint256)\":{\"notice\":\"Burn `@tokenAmount(self.token(): address, _amount, false)` tokens from `_holder`\"},\"changeTokenController(address)\":{\"notice\":\"Change the token controller to `_newController`\"},\"forward(bytes)\":{\"notice\":\"Execute desired action as a token holder\"},\"initialize(address,address,bool,uint256)\":{\"notice\":\"Initialize Token Manager for `_token.symbol(): string`, whose tokens are `_transferable ? '' : 'not'` transferable`_maxAccountTokens > 0 ? ' and limited to a maximum of ' + @tokenAmount(_token, _maxAccountTokens, false) + ' per account' : ''`\"},\"issue(uint256)\":{\"notice\":\"Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for the Token Manager\"},\"mint(address,uint256)\":{\"notice\":\"Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for `_receiver`\"},\"registerHook(address)\":{\"notice\":\"Create a new Token Manager hook for `_hook`\"},\"revokeHook(uint256)\":{\"notice\":\"Revoke Token Manager hook #`_hookId`\"},\"revokeVesting(address,uint256)\":{\"notice\":\"Revoke vesting #`_vestingId` from `_holder`, returning unvested tokens to the Token Manager\"},\"transferToVault(address)\":{\"notice\":\"Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them.\"},\"unwrap(uint256)\":{\"notice\":\"Unwrap @tokenAmount(self.token(): address, _amount, false) to receive @tokenAmount(self.wrappableToken(): address, _amount, false)\"},\"wrap(uint256)\":{\"notice\":\"Wrap @tokenAmount(self.wrappableToken(): address, _amount, false) to receive @tokenAmount(self.token(): address, _amount, false)\"}}}},\"settings\":{\"compilationTarget\":{\"contracts/HookedTokenManager.sol\":\"HookedTokenManager\"},\"evmVersion\":\"byzantium\",\"libraries\":{},\"optimizer\":{\"enabled\":true,\"runs\":20000},\"remappings\":[]},\"sources\":{\"@aragon/minime/contracts/ITokenController.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/// @dev The token controller contract must implement these functions\\n\\n\\ninterface ITokenController {\\n    /// @notice Called when `_owner` sends ether to the MiniMe Token contract\\n    /// @param _owner The address that sent the ether to create tokens\\n    /// @return True if the ether is accepted, false if it throws\\n    function proxyPayment(address _owner) external payable returns(bool);\\n\\n    /// @notice Notifies the controller about a token transfer allowing the\\n    ///  controller to react if desired\\n    /// @param _from The origin of the transfer\\n    /// @param _to The destination of the transfer\\n    /// @param _amount The amount of the transfer\\n    /// @return False if the controller does not authorize the transfer\\n    function onTransfer(address _from, address _to, uint _amount) external returns(bool);\\n\\n    /// @notice Notifies the controller about an approval allowing the\\n    ///  controller to react if desired\\n    /// @param _owner The address that calls `approve()`\\n    /// @param _spender The spender in the `approve()` call\\n    /// @param _amount The amount in the `approve()` call\\n    /// @return False if the controller does not authorize the approval\\n    function onApprove(address _owner, address _spender, uint _amount) external returns(bool);\\n}\\n\",\"keccak256\":\"0x030d1ea5543fd23d3c962cbf34b1c3b6e15d9bbfb711416e1cf4160c3bcdccaa\"},\"@aragon/minime/contracts/MiniMeToken.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n/*\\n    Copyright 2016, Jordi Baylina\\n    This program is free software: you can redistribute it and/or modify\\n    it under the terms of the GNU General Public License as published by\\n    the Free Software Foundation, either version 3 of the License, or\\n    (at your option) any later version.\\n    This program is distributed in the hope that it will be useful,\\n    but WITHOUT ANY WARRANTY; without even the implied warranty of\\n    MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the\\n    GNU General Public License for more details.\\n    You should have received a copy of the GNU General Public License\\n    along with this program.  If not, see <http://www.gnu.org/licenses/>.\\n */\\n\\n/// @title MiniMeToken Contract\\n/// @author Jordi Baylina\\n/// @dev This token contract's goal is to make it easy for anyone to clone this\\n///  token using the token distribution at a given block, this will allow DAO's\\n///  and DApps to upgrade their features in a decentralized manner without\\n///  affecting the original token\\n/// @dev It is ERC20 compliant, but still needs to under go further testing.\\n\\nimport \\\"./ITokenController.sol\\\";\\n\\ncontract Controlled {\\n    /// @notice The address of the controller is the only address that can call\\n    ///  a function with this modifier\\n    modifier onlyController {\\n        require(msg.sender == controller);\\n        _;\\n    }\\n\\n    address public controller;\\n\\n    function Controlled()  public { controller = msg.sender;}\\n\\n    /// @notice Changes the controller of the contract\\n    /// @param _newController The new controller of the contract\\n    function changeController(address _newController) onlyController  public {\\n        controller = _newController;\\n    }\\n}\\n\\ncontract ApproveAndCallFallBack {\\n    function receiveApproval(\\n        address from,\\n        uint256 _amount,\\n        address _token,\\n        bytes _data\\n    ) public;\\n}\\n\\n/// @dev The actual token contract, the default controller is the msg.sender\\n///  that deploys the contract, so usually this token will be deployed by a\\n///  token controller contract, which Giveth will call a \\\"Campaign\\\"\\ncontract MiniMeToken is Controlled {\\n\\n    string public name;                //The Token's name: e.g. DigixDAO Tokens\\n    uint8 public decimals;             //Number of decimals of the smallest unit\\n    string public symbol;              //An identifier: e.g. REP\\n    string public version = \\\"MMT_0.1\\\"; //An arbitrary versioning scheme\\n\\n\\n    /// @dev `Checkpoint` is the structure that attaches a block number to a\\n    ///  given value, the block number attached is the one that last changed the\\n    ///  value\\n    struct Checkpoint {\\n\\n        // `fromBlock` is the block number that the value was generated from\\n        uint128 fromBlock;\\n\\n        // `value` is the amount of tokens at a specific block number\\n        uint128 value;\\n    }\\n\\n    // `parentToken` is the Token address that was cloned to produce this token;\\n    //  it will be 0x0 for a token that was not cloned\\n    MiniMeToken public parentToken;\\n\\n    // `parentSnapShotBlock` is the block number from the Parent Token that was\\n    //  used to determine the initial distribution of the Clone Token\\n    uint public parentSnapShotBlock;\\n\\n    // `creationBlock` is the block number that the Clone Token was created\\n    uint public creationBlock;\\n\\n    // `balances` is the map that tracks the balance of each address, in this\\n    //  contract when the balance changes the block number that the change\\n    //  occurred is also included in the map\\n    mapping (address => Checkpoint[]) balances;\\n\\n    // `allowed` tracks any extra transfer rights as in all ERC20 tokens\\n    mapping (address => mapping (address => uint256)) allowed;\\n\\n    // Tracks the history of the `totalSupply` of the token\\n    Checkpoint[] totalSupplyHistory;\\n\\n    // Flag that determines if the token is transferable or not.\\n    bool public transfersEnabled;\\n\\n    // The factory used to create new clone tokens\\n    MiniMeTokenFactory public tokenFactory;\\n\\n////////////////\\n// Constructor\\n////////////////\\n\\n    /// @notice Constructor to create a MiniMeToken\\n    /// @param _tokenFactory The address of the MiniMeTokenFactory contract that\\n    ///  will create the Clone token contracts, the token factory needs to be\\n    ///  deployed first\\n    /// @param _parentToken Address of the parent token, set to 0x0 if it is a\\n    ///  new token\\n    /// @param _parentSnapShotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token, set to 0 if it\\n    ///  is a new token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    function MiniMeToken(\\n        MiniMeTokenFactory _tokenFactory,\\n        MiniMeToken _parentToken,\\n        uint _parentSnapShotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    )  public\\n    {\\n        tokenFactory = _tokenFactory;\\n        name = _tokenName;                                 // Set the name\\n        decimals = _decimalUnits;                          // Set the decimals\\n        symbol = _tokenSymbol;                             // Set the symbol\\n        parentToken = _parentToken;\\n        parentSnapShotBlock = _parentSnapShotBlock;\\n        transfersEnabled = _transfersEnabled;\\n        creationBlock = block.number;\\n    }\\n\\n\\n///////////////////\\n// ERC20 Methods\\n///////////////////\\n\\n    /// @notice Send `_amount` tokens to `_to` from `msg.sender`\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return Whether the transfer was successful or not\\n    function transfer(address _to, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n        return doTransfer(msg.sender, _to, _amount);\\n    }\\n\\n    /// @notice Send `_amount` tokens to `_to` from `_from` on the condition it\\n    ///  is approved by `_from`\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function transferFrom(address _from, address _to, uint256 _amount) public returns (bool success) {\\n\\n        // The controller of this contract can move tokens around at will,\\n        //  this is important to recognize! Confirm that you trust the\\n        //  controller of this contract, which in most situations should be\\n        //  another open source smart contract or 0x0\\n        if (msg.sender != controller) {\\n            require(transfersEnabled);\\n\\n            // The standard ERC 20 transferFrom functionality\\n            if (allowed[_from][msg.sender] < _amount)\\n                return false;\\n            allowed[_from][msg.sender] -= _amount;\\n        }\\n        return doTransfer(_from, _to, _amount);\\n    }\\n\\n    /// @dev This is the actual transfer function in the token contract, it can\\n    ///  only be called by other functions in this contract.\\n    /// @param _from The address holding the tokens being transferred\\n    /// @param _to The address of the recipient\\n    /// @param _amount The amount of tokens to be transferred\\n    /// @return True if the transfer was successful\\n    function doTransfer(address _from, address _to, uint _amount) internal returns(bool) {\\n        if (_amount == 0) {\\n            return true;\\n        }\\n        require(parentSnapShotBlock < block.number);\\n        // Do not allow transfer to 0x0 or the token contract itself\\n        require((_to != 0) && (_to != address(this)));\\n        // If the amount being transfered is more than the balance of the\\n        //  account the transfer returns false\\n        var previousBalanceFrom = balanceOfAt(_from, block.number);\\n        if (previousBalanceFrom < _amount) {\\n            return false;\\n        }\\n        // Alerts the token controller of the transfer\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onTransfer(_from, _to, _amount) == true);\\n        }\\n        // First update the balance array with the new value for the address\\n        //  sending the tokens\\n        updateValueAtNow(balances[_from], previousBalanceFrom - _amount);\\n        // Then update the balance array with the new value for the address\\n        //  receiving the tokens\\n        var previousBalanceTo = balanceOfAt(_to, block.number);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(balances[_to], previousBalanceTo + _amount);\\n        // An event to make the transfer easy to find on the blockchain\\n        Transfer(_from, _to, _amount);\\n        return true;\\n    }\\n\\n    /// @param _owner The address that's balance is being requested\\n    /// @return The balance of `_owner` at the current block\\n    function balanceOf(address _owner) public constant returns (uint256 balance) {\\n        return balanceOfAt(_owner, block.number);\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to spend `_amount` tokens on\\n    ///  its behalf. This is a modified version of the ERC20 approve function\\n    ///  to be a little bit safer\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the approval was successful\\n    function approve(address _spender, uint256 _amount) public returns (bool success) {\\n        require(transfersEnabled);\\n\\n        // To change the approve amount you first have to reduce the addresses`\\n        //  allowance to zero by calling `approve(_spender,0)` if it is not\\n        //  already 0 to mitigate the race condition described here:\\n        //  https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n        require((_amount == 0) || (allowed[msg.sender][_spender] == 0));\\n\\n        // Alerts the token controller of the approve function call\\n        if (isContract(controller)) {\\n            // Adding the ` == true` makes the linter shut up so...\\n            require(ITokenController(controller).onApprove(msg.sender, _spender, _amount) == true);\\n        }\\n\\n        allowed[msg.sender][_spender] = _amount;\\n        Approval(msg.sender, _spender, _amount);\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to read the `allowed[]` map\\n    /// @param _owner The address of the account that owns the token\\n    /// @param _spender The address of the account able to transfer the tokens\\n    /// @return Amount of remaining tokens of _owner that _spender is allowed\\n    ///  to spend\\n    function allowance(address _owner, address _spender) public constant returns (uint256 remaining) {\\n        return allowed[_owner][_spender];\\n    }\\n\\n    /// @notice `msg.sender` approves `_spender` to send `_amount` tokens on\\n    ///  its behalf, and then a function is triggered in the contract that is\\n    ///  being approved, `_spender`. This allows users to use their tokens to\\n    ///  interact with contracts in one function call instead of two\\n    /// @param _spender The address of the contract able to transfer the tokens\\n    /// @param _amount The amount of tokens to be approved for transfer\\n    /// @return True if the function call was successful\\n    function approveAndCall(ApproveAndCallFallBack _spender, uint256 _amount, bytes _extraData) public returns (bool success) {\\n        require(approve(_spender, _amount));\\n\\n        _spender.receiveApproval(\\n            msg.sender,\\n            _amount,\\n            this,\\n            _extraData\\n        );\\n\\n        return true;\\n    }\\n\\n    /// @dev This function makes it easy to get the total number of tokens\\n    /// @return The total number of tokens\\n    function totalSupply() public constant returns (uint) {\\n        return totalSupplyAt(block.number);\\n    }\\n\\n\\n////////////////\\n// Query balance and totalSupply in History\\n////////////////\\n\\n    /// @dev Queries the balance of `_owner` at a specific `_blockNumber`\\n    /// @param _owner The address from which the balance will be retrieved\\n    /// @param _blockNumber The block number when the balance is queried\\n    /// @return The balance at `_blockNumber`\\n    function balanceOfAt(address _owner, uint _blockNumber) public constant returns (uint) {\\n\\n        // These next few lines are used when the balance of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.balanceOfAt` be queried at the\\n        //  genesis block for that token as this contains initial balance of\\n        //  this token\\n        if ((balances[_owner].length == 0) || (balances[_owner][0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.balanceOfAt(_owner, min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                // Has no parent\\n                return 0;\\n            }\\n\\n        // This will return the expected balance during normal situations\\n        } else {\\n            return getValueAt(balances[_owner], _blockNumber);\\n        }\\n    }\\n\\n    /// @notice Total amount of tokens at a specific `_blockNumber`.\\n    /// @param _blockNumber The block number when the totalSupply is queried\\n    /// @return The total amount of tokens at `_blockNumber`\\n    function totalSupplyAt(uint _blockNumber) public constant returns(uint) {\\n\\n        // These next few lines are used when the totalSupply of the token is\\n        //  requested before a check point was ever created for this token, it\\n        //  requires that the `parentToken.totalSupplyAt` be queried at the\\n        //  genesis block for this token as that contains totalSupply of this\\n        //  token at this block number.\\n        if ((totalSupplyHistory.length == 0) || (totalSupplyHistory[0].fromBlock > _blockNumber)) {\\n            if (address(parentToken) != 0) {\\n                return parentToken.totalSupplyAt(min(_blockNumber, parentSnapShotBlock));\\n            } else {\\n                return 0;\\n            }\\n\\n        // This will return the expected totalSupply during normal situations\\n        } else {\\n            return getValueAt(totalSupplyHistory, _blockNumber);\\n        }\\n    }\\n\\n////////////////\\n// Clone Token Method\\n////////////////\\n\\n    /// @notice Creates a new clone token with the initial distribution being\\n    ///  this token at `_snapshotBlock`\\n    /// @param _cloneTokenName Name of the clone token\\n    /// @param _cloneDecimalUnits Number of decimals of the smallest unit\\n    /// @param _cloneTokenSymbol Symbol of the clone token\\n    /// @param _snapshotBlock Block when the distribution of the parent token is\\n    ///  copied to set the initial distribution of the new clone token;\\n    ///  if the block is zero than the actual block, the current block is used\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    /// @return The address of the new MiniMeToken Contract\\n    function createCloneToken(\\n        string _cloneTokenName,\\n        uint8 _cloneDecimalUnits,\\n        string _cloneTokenSymbol,\\n        uint _snapshotBlock,\\n        bool _transfersEnabled\\n    ) public returns(MiniMeToken)\\n    {\\n        uint256 snapshot = _snapshotBlock == 0 ? block.number - 1 : _snapshotBlock;\\n\\n        MiniMeToken cloneToken = tokenFactory.createCloneToken(\\n            this,\\n            snapshot,\\n            _cloneTokenName,\\n            _cloneDecimalUnits,\\n            _cloneTokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        cloneToken.changeController(msg.sender);\\n\\n        // An event to make the token easy to find on the blockchain\\n        NewCloneToken(address(cloneToken), snapshot);\\n        return cloneToken;\\n    }\\n\\n////////////////\\n// Generate and destroy tokens\\n////////////////\\n\\n    /// @notice Generates `_amount` tokens that are assigned to `_owner`\\n    /// @param _owner The address that will be assigned the new tokens\\n    /// @param _amount The quantity of tokens generated\\n    /// @return True if the tokens are generated correctly\\n    function generateTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply + _amount >= curTotalSupply); // Check for overflow\\n        uint previousBalanceTo = balanceOf(_owner);\\n        require(previousBalanceTo + _amount >= previousBalanceTo); // Check for overflow\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply + _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceTo + _amount);\\n        Transfer(0, _owner, _amount);\\n        return true;\\n    }\\n\\n\\n    /// @notice Burns `_amount` tokens from `_owner`\\n    /// @param _owner The address that will lose the tokens\\n    /// @param _amount The quantity of tokens to burn\\n    /// @return True if the tokens are burned correctly\\n    function destroyTokens(address _owner, uint _amount) onlyController public returns (bool) {\\n        uint curTotalSupply = totalSupply();\\n        require(curTotalSupply >= _amount);\\n        uint previousBalanceFrom = balanceOf(_owner);\\n        require(previousBalanceFrom >= _amount);\\n        updateValueAtNow(totalSupplyHistory, curTotalSupply - _amount);\\n        updateValueAtNow(balances[_owner], previousBalanceFrom - _amount);\\n        Transfer(_owner, 0, _amount);\\n        return true;\\n    }\\n\\n////////////////\\n// Enable tokens transfers\\n////////////////\\n\\n\\n    /// @notice Enables token holders to transfer their tokens freely if true\\n    /// @param _transfersEnabled True if transfers are allowed in the clone\\n    function enableTransfers(bool _transfersEnabled) onlyController public {\\n        transfersEnabled = _transfersEnabled;\\n    }\\n\\n////////////////\\n// Internal helper functions to query and set a value in a snapshot array\\n////////////////\\n\\n    /// @dev `getValueAt` retrieves the number of tokens at a given block number\\n    /// @param checkpoints The history of values being queried\\n    /// @param _block The block number to retrieve the value at\\n    /// @return The number of tokens being queried\\n    function getValueAt(Checkpoint[] storage checkpoints, uint _block) constant internal returns (uint) {\\n        if (checkpoints.length == 0)\\n            return 0;\\n\\n        // Shortcut for the actual value\\n        if (_block >= checkpoints[checkpoints.length-1].fromBlock)\\n            return checkpoints[checkpoints.length-1].value;\\n        if (_block < checkpoints[0].fromBlock)\\n            return 0;\\n\\n        // Binary search of the value in the array\\n        uint min = 0;\\n        uint max = checkpoints.length-1;\\n        while (max > min) {\\n            uint mid = (max + min + 1) / 2;\\n            if (checkpoints[mid].fromBlock<=_block) {\\n                min = mid;\\n            } else {\\n                max = mid-1;\\n            }\\n        }\\n        return checkpoints[min].value;\\n    }\\n\\n    /// @dev `updateValueAtNow` used to update the `balances` map and the\\n    ///  `totalSupplyHistory`\\n    /// @param checkpoints The history of data being updated\\n    /// @param _value The new number of tokens\\n    function updateValueAtNow(Checkpoint[] storage checkpoints, uint _value) internal {\\n        require(_value <= uint128(-1));\\n\\n        if ((checkpoints.length == 0) || (checkpoints[checkpoints.length - 1].fromBlock < block.number)) {\\n            Checkpoint storage newCheckPoint = checkpoints[checkpoints.length++];\\n            newCheckPoint.fromBlock = uint128(block.number);\\n            newCheckPoint.value = uint128(_value);\\n        } else {\\n            Checkpoint storage oldCheckPoint = checkpoints[checkpoints.length - 1];\\n            oldCheckPoint.value = uint128(_value);\\n        }\\n    }\\n\\n    /// @dev Internal function to determine if an address is a contract\\n    /// @param _addr The address being queried\\n    /// @return True if `_addr` is a contract\\n    function isContract(address _addr) constant internal returns(bool) {\\n        uint size;\\n        if (_addr == 0)\\n            return false;\\n\\n        assembly {\\n            size := extcodesize(_addr)\\n        }\\n\\n        return size>0;\\n    }\\n\\n    /// @dev Helper function to return a min betwen the two uints\\n    function min(uint a, uint b) pure internal returns (uint) {\\n        return a < b ? a : b;\\n    }\\n\\n    /// @notice The fallback function: If the contract's controller has not been\\n    ///  set to 0, then the `proxyPayment` method is called which relays the\\n    ///  ether and creates tokens as described in the token controller contract\\n    function () external payable {\\n        require(isContract(controller));\\n        // Adding the ` == true` makes the linter shut up so...\\n        require(ITokenController(controller).proxyPayment.value(msg.value)(msg.sender) == true);\\n    }\\n\\n//////////\\n// Safety Methods\\n//////////\\n\\n    /// @notice This method can be used by the controller to extract mistakenly\\n    ///  sent tokens to this contract.\\n    /// @param _token The address of the token contract that you want to recover\\n    ///  set to 0 in case you want to extract ether.\\n    function claimTokens(address _token) onlyController public {\\n        if (_token == 0x0) {\\n            controller.transfer(this.balance);\\n            return;\\n        }\\n\\n        MiniMeToken token = MiniMeToken(_token);\\n        uint balance = token.balanceOf(this);\\n        token.transfer(controller, balance);\\n        ClaimedTokens(_token, controller, balance);\\n    }\\n\\n////////////////\\n// Events\\n////////////////\\n    event ClaimedTokens(address indexed _token, address indexed _controller, uint _amount);\\n    event Transfer(address indexed _from, address indexed _to, uint256 _amount);\\n    event NewCloneToken(address indexed _cloneToken, uint _snapshotBlock);\\n    event Approval(\\n        address indexed _owner,\\n        address indexed _spender,\\n        uint256 _amount\\n        );\\n\\n}\\n\\n\\n////////////////\\n// MiniMeTokenFactory\\n////////////////\\n\\n/// @dev This contract is used to generate clone contracts from a contract.\\n///  In solidity this is the way to create a contract from a contract of the\\n///  same class\\ncontract MiniMeTokenFactory {\\n    event NewFactoryCloneToken(address indexed _cloneToken, address indexed _parentToken, uint _snapshotBlock);\\n\\n    /// @notice Update the DApp by creating a new token with new functionalities\\n    ///  the msg.sender becomes the controller of this clone token\\n    /// @param _parentToken Address of the token being cloned\\n    /// @param _snapshotBlock Block of the parent token that will\\n    ///  determine the initial distribution of the clone token\\n    /// @param _tokenName Name of the new token\\n    /// @param _decimalUnits Number of decimals of the new token\\n    /// @param _tokenSymbol Token Symbol for the new token\\n    /// @param _transfersEnabled If true, tokens will be able to be transferred\\n    /// @return The address of the new token contract\\n    function createCloneToken(\\n        MiniMeToken _parentToken,\\n        uint _snapshotBlock,\\n        string _tokenName,\\n        uint8 _decimalUnits,\\n        string _tokenSymbol,\\n        bool _transfersEnabled\\n    ) public returns (MiniMeToken)\\n    {\\n        MiniMeToken newToken = new MiniMeToken(\\n            this,\\n            _parentToken,\\n            _snapshotBlock,\\n            _tokenName,\\n            _decimalUnits,\\n            _tokenSymbol,\\n            _transfersEnabled\\n        );\\n\\n        newToken.changeController(msg.sender);\\n        NewFactoryCloneToken(address(newToken), address(_parentToken), _snapshotBlock);\\n        return newToken;\\n    }\\n}\",\"keccak256\":\"0x919edb5f2d6fd10329d7de8bbe4c31b144a744d4201b588ead3ddd71cbc2a70c\"},\"@aragon/os/contracts/acl/ACLSyntaxSugar.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ACLSyntaxSugar {\\n    function arr() internal pure returns (uint256[]) {\\n        return new uint256[](0);\\n    }\\n\\n    function arr(bytes32 _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(bytes32 _a, bytes32 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a));\\n    }\\n\\n    function arr(address _a, address _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c);\\n    }\\n\\n    function arr(address _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), _b, _c, _d);\\n    }\\n\\n    function arr(address _a, uint256 _b) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), _c, _d, _e);\\n    }\\n\\n    function arr(address _a, address _b, address _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(address _a, address _b, uint256 _c) internal pure returns (uint256[] r) {\\n        return arr(uint256(_a), uint256(_b), uint256(_c));\\n    }\\n\\n    function arr(uint256 _a) internal pure returns (uint256[] r) {\\n        r = new uint256[](1);\\n        r[0] = _a;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b) internal pure returns (uint256[] r) {\\n        r = new uint256[](2);\\n        r[0] = _a;\\n        r[1] = _b;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c) internal pure returns (uint256[] r) {\\n        r = new uint256[](3);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d) internal pure returns (uint256[] r) {\\n        r = new uint256[](4);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n    }\\n\\n    function arr(uint256 _a, uint256 _b, uint256 _c, uint256 _d, uint256 _e) internal pure returns (uint256[] r) {\\n        r = new uint256[](5);\\n        r[0] = _a;\\n        r[1] = _b;\\n        r[2] = _c;\\n        r[3] = _d;\\n        r[4] = _e;\\n    }\\n}\\n\\n\\ncontract ACLHelpers {\\n    function decodeParamOp(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 30));\\n    }\\n\\n    function decodeParamId(uint256 _x) internal pure returns (uint8 b) {\\n        return uint8(_x >> (8 * 31));\\n    }\\n\\n    function decodeParamsList(uint256 _x) internal pure returns (uint32 a, uint32 b, uint32 c) {\\n        a = uint32(_x);\\n        b = uint32(_x >> (8 * 4));\\n        c = uint32(_x >> (8 * 8));\\n    }\\n}\\n\",\"keccak256\":\"0x672a96975fc17f66905e775645cc93249426ce9601aef597a13d1e449c7f89d0\"},\"@aragon/os/contracts/acl/IACL.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IACL {\\n    function initialize(address permissionsCreator) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n}\\n\",\"keccak256\":\"0x7e081f42891bbcc8fa9f3a67efb34ecafa8e2c075e37a01d74d221c45ddfdd10\"},\"@aragon/os/contracts/apps/AppStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IAragonApp.sol\\\";\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract AppStorage is IAragonApp {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_POSITION = keccak256(\\\"aragonOS.appStorage.kernel\\\");\\n    bytes32 internal constant APP_ID_POSITION = keccak256(\\\"aragonOS.appStorage.appId\\\");\\n    */\\n    bytes32 internal constant KERNEL_POSITION = 0x4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b;\\n    bytes32 internal constant APP_ID_POSITION = 0xd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b;\\n\\n    function kernel() public view returns (IKernel) {\\n        return IKernel(KERNEL_POSITION.getStorageAddress());\\n    }\\n\\n    function appId() public view returns (bytes32) {\\n        return APP_ID_POSITION.getStorageBytes32();\\n    }\\n\\n    function setKernel(IKernel _kernel) internal {\\n        KERNEL_POSITION.setStorageAddress(address(_kernel));\\n    }\\n\\n    function setAppId(bytes32 _appId) internal {\\n        APP_ID_POSITION.setStorageBytes32(_appId);\\n    }\\n}\\n\",\"keccak256\":\"0x57f490644a5acb26fca0b4cb2cc7f52e64b0dbe9ca5d111f7c1b4e5250ed93ad\"},\"@aragon/os/contracts/apps/AragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./AppStorage.sol\\\";\\nimport \\\"../acl/ACLSyntaxSugar.sol\\\";\\nimport \\\"../common/Autopetrified.sol\\\";\\nimport \\\"../common/ConversionHelpers.sol\\\";\\nimport \\\"../common/ReentrancyGuard.sol\\\";\\nimport \\\"../common/VaultRecoverable.sol\\\";\\nimport \\\"../evmscript/EVMScriptRunner.sol\\\";\\nimport \\\"../lib/standards/ERC165.sol\\\";\\n\\n\\n// Contracts inheriting from AragonApp are, by default, immediately petrified upon deployment so\\n// that they can never be initialized.\\n// Unless overriden, this behaviour enforces those contracts to be usable only behind an AppProxy.\\n// ReentrancyGuard, EVMScriptRunner, and ACLSyntaxSugar are not directly used by this contract, but\\n// are included so that they are automatically usable by subclassing contracts\\ncontract AragonApp is ERC165, AppStorage, Autopetrified, VaultRecoverable, ReentrancyGuard, EVMScriptRunner, ACLSyntaxSugar {\\n    string private constant ERROR_AUTH_FAILED = \\\"APP_AUTH_FAILED\\\";\\n\\n    modifier auth(bytes32 _role) {\\n        require(canPerform(msg.sender, _role, new uint256[](0)), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    modifier authP(bytes32 _role, uint256[] _params) {\\n        require(canPerform(msg.sender, _role, _params), ERROR_AUTH_FAILED);\\n        _;\\n    }\\n\\n    /**\\n    * @dev Check whether an action can be performed by a sender for a particular role on this app\\n    * @param _sender Sender of the call\\n    * @param _role Role on this app\\n    * @param _params Permission params for the role\\n    * @return Boolean indicating whether the sender has the permissions to perform the action.\\n    *         Always returns false if the app hasn't been initialized yet.\\n    */\\n    function canPerform(address _sender, bytes32 _role, uint256[] _params) public view returns (bool) {\\n        if (!hasInitialized()) {\\n            return false;\\n        }\\n\\n        IKernel linkedKernel = kernel();\\n        if (address(linkedKernel) == address(0)) {\\n            return false;\\n        }\\n\\n        return linkedKernel.hasPermission(\\n            _sender,\\n            address(this),\\n            _role,\\n            ConversionHelpers.dangerouslyCastUintArrayToBytes(_params)\\n        );\\n    }\\n\\n    /**\\n    * @dev Get the recovery vault for the app\\n    * @return Recovery vault address for the app\\n    */\\n    function getRecoveryVault() public view returns (address) {\\n        // Funds recovery via a vault is only available when used with a kernel\\n        return kernel().getRecoveryVault(); // if kernel is not set, it will revert\\n    }\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return super.supportsInterface(_interfaceId) || _interfaceId == ARAGON_APP_INTERFACE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0xa6c2ed08d7df92bf791ff85ecc9e400a874acfa6a7d961fa07e9175fb77231f4\"},\"@aragon/os/contracts/apps/IAragonApp.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../kernel/IKernel.sol\\\";\\n\\n\\ncontract IAragonApp {\\n    // Includes appId and kernel methods:\\n    bytes4 internal constant ARAGON_APP_INTERFACE_ID = bytes4(0x54053e6c);\\n\\n    function kernel() public view returns (IKernel);\\n    function appId() public view returns (bytes32);\\n}\\n\",\"keccak256\":\"0xdf64e62d609623a151c233b5f473f385117d68172aa2bf1ac4dc5cd8c5a3fc5b\"},\"@aragon/os/contracts/common/Autopetrified.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Petrifiable.sol\\\";\\n\\n\\ncontract Autopetrified is Petrifiable {\\n    constructor() public {\\n        // Immediately petrify base (non-proxy) instances of inherited contracts on deploy.\\n        // This renders them uninitializable (and unusable without a proxy).\\n        petrify();\\n    }\\n}\\n\",\"keccak256\":\"0x42f0422744e13674e38bfbef079af7150883aba96ddbe61c5ae50df31d42696e\"},\"@aragon/os/contracts/common/ConversionHelpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary ConversionHelpers {\\n    string private constant ERROR_IMPROPER_LENGTH = \\\"CONVERSION_IMPROPER_LENGTH\\\";\\n\\n    function dangerouslyCastUintArrayToBytes(uint256[] memory _input) internal pure returns (bytes memory output) {\\n        // Force cast the uint256[] into a bytes array, by overwriting its length\\n        // Note that the bytes array doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 byteLength = _input.length * 32;\\n        assembly {\\n            output := _input\\n            mstore(output, byteLength)\\n        }\\n    }\\n\\n    function dangerouslyCastBytesToUintArray(bytes memory _input) internal pure returns (uint256[] memory output) {\\n        // Force cast the bytes array into a uint256[], by overwriting its length\\n        // Note that the uint256[] doesn't need to be initialized as we immediately overwrite it\\n        // with the input and a new length. The input becomes invalid from this point forward.\\n        uint256 intsLength = _input.length / 32;\\n        require(_input.length == intsLength * 32, ERROR_IMPROPER_LENGTH);\\n\\n        assembly {\\n            output := _input\\n            mstore(output, intsLength)\\n        }\\n    }\\n}\\n\",\"keccak256\":\"0x9872383d458352f5c68fa5afd1fc84ab6b172cbee33359cfa57655b8eda92416\"},\"@aragon/os/contracts/common/EtherTokenConstant.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n// aragonOS and aragon-apps rely on address(0) to denote native ETH, in\\n// contracts where both tokens and ETH are accepted\\ncontract EtherTokenConstant {\\n    address internal constant ETH = address(0);\\n}\\n\",\"keccak256\":\"0x6b2fa091968161075154a77fa741a3484c891d73cd3cd14ede502ff56dd08dfc\"},\"@aragon/os/contracts/common/IVaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IVaultRecoverable {\\n    event RecoverToVault(address indexed vault, address indexed token, uint256 amount);\\n\\n    function transferToVault(address token) external;\\n\\n    function allowRecoverability(address token) external view returns (bool);\\n    function getRecoveryVault() external view returns (address);\\n}\\n\",\"keccak256\":\"0xa8e004decf086e817a864b485473b687c2c468c82af7b5011d9908586f7cbf36\"},\"@aragon/os/contracts/common/Initializable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./TimeHelpers.sol\\\";\\nimport \\\"./UnstructuredStorage.sol\\\";\\n\\n\\ncontract Initializable is TimeHelpers {\\n    using UnstructuredStorage for bytes32;\\n\\n    // keccak256(\\\"aragonOS.initializable.initializationBlock\\\")\\n    bytes32 internal constant INITIALIZATION_BLOCK_POSITION = 0xebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e;\\n\\n    string private constant ERROR_ALREADY_INITIALIZED = \\\"INIT_ALREADY_INITIALIZED\\\";\\n    string private constant ERROR_NOT_INITIALIZED = \\\"INIT_NOT_INITIALIZED\\\";\\n\\n    modifier onlyInit {\\n        require(getInitializationBlock() == 0, ERROR_ALREADY_INITIALIZED);\\n        _;\\n    }\\n\\n    modifier isInitialized {\\n        require(hasInitialized(), ERROR_NOT_INITIALIZED);\\n        _;\\n    }\\n\\n    /**\\n    * @return Block number in which the contract was initialized\\n    */\\n    function getInitializationBlock() public view returns (uint256) {\\n        return INITIALIZATION_BLOCK_POSITION.getStorageUint256();\\n    }\\n\\n    /**\\n    * @return Whether the contract has been initialized by the time of the current block\\n    */\\n    function hasInitialized() public view returns (bool) {\\n        uint256 initializationBlock = getInitializationBlock();\\n        return initializationBlock != 0 && getBlockNumber() >= initializationBlock;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization has finished.\\n    */\\n    function initialized() internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(getBlockNumber());\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract after initialization to enable the contract\\n    *      at a future block number rather than immediately.\\n    */\\n    function initializedAt(uint256 _blockNumber) internal onlyInit {\\n        INITIALIZATION_BLOCK_POSITION.setStorageUint256(_blockNumber);\\n    }\\n}\\n\",\"keccak256\":\"0xc859366d3143499d1458ea55cb5374ae1ca1faf41763cad5e051dea2da373ba1\"},\"@aragon/os/contracts/common/IsContract.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract IsContract {\\n    /*\\n    * NOTE: this should NEVER be used for authentication\\n    * (see pitfalls: https://github.com/fergarrui/ethereum-security/tree/master/contracts/extcodesize).\\n    *\\n    * This is only intended to be used as a sanity check that an address is actually a contract,\\n    * RATHER THAN an address not being a contract.\\n    */\\n    function isContract(address _target) internal view returns (bool) {\\n        if (_target == address(0)) {\\n            return false;\\n        }\\n\\n        uint256 size;\\n        assembly { size := extcodesize(_target) }\\n        return size > 0;\\n    }\\n}\\n\",\"keccak256\":\"0x9dd99d770a5eed901ba749e1f02e4fae443e71e899f4909f56825dfc378da089\"},\"@aragon/os/contracts/common/Petrifiable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Initializable.sol\\\";\\n\\n\\ncontract Petrifiable is Initializable {\\n    // Use block UINT256_MAX (which should be never) as the initializable date\\n    uint256 internal constant PETRIFIED_BLOCK = uint256(-1);\\n\\n    function isPetrified() public view returns (bool) {\\n        return getInitializationBlock() == PETRIFIED_BLOCK;\\n    }\\n\\n    /**\\n    * @dev Function to be called by top level contract to prevent being initialized.\\n    *      Useful for freezing base contracts when they're used behind proxies.\\n    */\\n    function petrify() internal onlyInit {\\n        initializedAt(PETRIFIED_BLOCK);\\n    }\\n}\\n\",\"keccak256\":\"0x797d3a58b782032f6afc51725326c0b51dceb00f3af6b85b25bd91cc10d22504\"},\"@aragon/os/contracts/common/ReentrancyGuard.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../common/UnstructuredStorage.sol\\\";\\n\\n\\ncontract ReentrancyGuard {\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant REENTRANCY_MUTEX_POSITION = keccak256(\\\"aragonOS.reentrancyGuard.mutex\\\");\\n    */\\n    bytes32 private constant REENTRANCY_MUTEX_POSITION = 0xe855346402235fdd185c890e68d2c4ecad599b88587635ee285bce2fda58dacb;\\n\\n    string private constant ERROR_REENTRANT = \\\"REENTRANCY_REENTRANT_CALL\\\";\\n\\n    modifier nonReentrant() {\\n        // Ensure mutex is unlocked\\n        require(!REENTRANCY_MUTEX_POSITION.getStorageBool(), ERROR_REENTRANT);\\n\\n        // Lock mutex before function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(true);\\n\\n        // Perform function call\\n        _;\\n\\n        // Unlock mutex after function call\\n        REENTRANCY_MUTEX_POSITION.setStorageBool(false);\\n    }\\n}\\n\",\"keccak256\":\"0xd89653c118bbd8cace423c45daa37986c566672198a415254011c028d1831189\"},\"@aragon/os/contracts/common/SafeERC20.sol\":{\"content\":\"// Inspired by AdEx (https://github.com/AdExNetwork/adex-protocol-eth/blob/b9df617829661a7518ee10f4cb6c4108659dd6d5/contracts/libs/SafeERC20.sol)\\n// and 0x (https://github.com/0xProject/0x-monorepo/blob/737d1dc54d72872e24abce5a1dbe1b66d35fa21a/contracts/protocol/contracts/protocol/AssetProxy/ERC20Proxy.sol#L143)\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\n\\n\\nlibrary SafeERC20 {\\n    // Before 0.5, solidity has a mismatch between `address.transfer()` and `token.transfer()`:\\n    // https://github.com/ethereum/solidity/issues/3544\\n    bytes4 private constant TRANSFER_SELECTOR = 0xa9059cbb;\\n\\n    string private constant ERROR_TOKEN_BALANCE_REVERTED = \\\"SAFE_ERC_20_BALANCE_REVERTED\\\";\\n    string private constant ERROR_TOKEN_ALLOWANCE_REVERTED = \\\"SAFE_ERC_20_ALLOWANCE_REVERTED\\\";\\n\\n    function invokeAndCheckSuccess(address _addr, bytes memory _calldata)\\n        private\\n        returns (bool)\\n    {\\n        bool ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            let success := call(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                0,                    // no value\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                // Check number of bytes returned from last function call\\n                switch returndatasize\\n\\n                // No bytes returned: assume success\\n                case 0 {\\n                    ret := 1\\n                }\\n\\n                // 32 bytes returned: check if non-zero\\n                case 0x20 {\\n                    // Only return success if returned data was true\\n                    // Already have output in ptr\\n                    ret := eq(mload(ptr), 1)\\n                }\\n\\n                // Not sure what was returned: don't mark as success\\n                default { }\\n            }\\n        }\\n        return ret;\\n    }\\n\\n    function staticInvoke(address _addr, bytes memory _calldata)\\n        private\\n        view\\n        returns (bool, uint256)\\n    {\\n        bool success;\\n        uint256 ret;\\n        assembly {\\n            let ptr := mload(0x40)    // free memory pointer\\n\\n            success := staticcall(\\n                gas,                  // forward all gas\\n                _addr,                // address\\n                add(_calldata, 0x20), // calldata start\\n                mload(_calldata),     // calldata length\\n                ptr,                  // write output over free memory\\n                0x20                  // uint256 return\\n            )\\n\\n            if gt(success, 0) {\\n                ret := mload(ptr)\\n            }\\n        }\\n        return (success, ret);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transfer() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransfer(ERC20 _token, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferCallData = abi.encodeWithSelector(\\n            TRANSFER_SELECTOR,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.transferFrom() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeTransferFrom(ERC20 _token, address _from, address _to, uint256 _amount) internal returns (bool) {\\n        bytes memory transferFromCallData = abi.encodeWithSelector(\\n            _token.transferFrom.selector,\\n            _from,\\n            _to,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, transferFromCallData);\\n    }\\n\\n    /**\\n    * @dev Same as a standards-compliant ERC20.approve() that never reverts (returns false).\\n    *      Note that this makes an external call to the token.\\n    */\\n    function safeApprove(ERC20 _token, address _spender, uint256 _amount) internal returns (bool) {\\n        bytes memory approveCallData = abi.encodeWithSelector(\\n            _token.approve.selector,\\n            _spender,\\n            _amount\\n        );\\n        return invokeAndCheckSuccess(_token, approveCallData);\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.balanceOf().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticBalanceOf(ERC20 _token, address _owner) internal view returns (uint256) {\\n        bytes memory balanceOfCallData = abi.encodeWithSelector(\\n            _token.balanceOf.selector,\\n            _owner\\n        );\\n\\n        (bool success, uint256 tokenBalance) = staticInvoke(_token, balanceOfCallData);\\n        require(success, ERROR_TOKEN_BALANCE_REVERTED);\\n\\n        return tokenBalance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.allowance().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticAllowance(ERC20 _token, address _owner, address _spender) internal view returns (uint256) {\\n        bytes memory allowanceCallData = abi.encodeWithSelector(\\n            _token.allowance.selector,\\n            _owner,\\n            _spender\\n        );\\n\\n        (bool success, uint256 allowance) = staticInvoke(_token, allowanceCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return allowance;\\n    }\\n\\n    /**\\n    * @dev Static call into ERC20.totalSupply().\\n    * Reverts if the call fails for some reason (should never fail).\\n    */\\n    function staticTotalSupply(ERC20 _token) internal view returns (uint256) {\\n        bytes memory totalSupplyCallData = abi.encodeWithSelector(_token.totalSupply.selector);\\n\\n        (bool success, uint256 totalSupply) = staticInvoke(_token, totalSupplyCallData);\\n        require(success, ERROR_TOKEN_ALLOWANCE_REVERTED);\\n\\n        return totalSupply;\\n    }\\n}\\n\",\"keccak256\":\"0xd251a1207e1faa4c41500bf927310bb739b1fbc0bf880f236f8e0a9236d6a03a\"},\"@aragon/os/contracts/common/TimeHelpers.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./Uint256Helpers.sol\\\";\\n\\n\\ncontract TimeHelpers {\\n    using Uint256Helpers for uint256;\\n\\n    /**\\n    * @dev Returns the current block number.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber() internal view returns (uint256) {\\n        return block.number;\\n    }\\n\\n    /**\\n    * @dev Returns the current block number, converted to uint64.\\n    *      Using a function rather than `block.number` allows us to easily mock the block number in\\n    *      tests.\\n    */\\n    function getBlockNumber64() internal view returns (uint64) {\\n        return getBlockNumber().toUint64();\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp() internal view returns (uint256) {\\n        return block.timestamp; // solium-disable-line security/no-block-members\\n    }\\n\\n    /**\\n    * @dev Returns the current timestamp, converted to uint64.\\n    *      Using a function rather than `block.timestamp` allows us to easily mock it in\\n    *      tests.\\n    */\\n    function getTimestamp64() internal view returns (uint64) {\\n        return getTimestamp().toUint64();\\n    }\\n}\\n\",\"keccak256\":\"0xfaba85207f0bb4bb5d7b6685a963c39a3258641bda6e523175640c3f9aeb2045\"},\"@aragon/os/contracts/common/Uint256Helpers.sol\":{\"content\":\"pragma solidity ^0.4.24;\\n\\n\\nlibrary Uint256Helpers {\\n    uint256 private constant MAX_UINT64 = uint64(-1);\\n\\n    string private constant ERROR_NUMBER_TOO_BIG = \\\"UINT64_NUMBER_TOO_BIG\\\";\\n\\n    function toUint64(uint256 a) internal pure returns (uint64) {\\n        require(a <= MAX_UINT64, ERROR_NUMBER_TOO_BIG);\\n        return uint64(a);\\n    }\\n}\\n\",\"keccak256\":\"0x83033025a3f4402be3b7bcc9a23ce96ae4fadc7f251da8f139d73a13a3400b0c\"},\"@aragon/os/contracts/common/UnstructuredStorage.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\nlibrary UnstructuredStorage {\\n    function getStorageBool(bytes32 position) internal view returns (bool data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageAddress(bytes32 position) internal view returns (address data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageBytes32(bytes32 position) internal view returns (bytes32 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function getStorageUint256(bytes32 position) internal view returns (uint256 data) {\\n        assembly { data := sload(position) }\\n    }\\n\\n    function setStorageBool(bytes32 position, bool data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageAddress(bytes32 position, address data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageBytes32(bytes32 position, bytes32 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n\\n    function setStorageUint256(bytes32 position, uint256 data) internal {\\n        assembly { sstore(position, data) }\\n    }\\n}\\n\",\"keccak256\":\"0xe497dcb85bbbf10224623247f39a4aeed7d3b230de2a811f3b69cb0e7d0a64d4\"},\"@aragon/os/contracts/common/VaultRecoverable.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../lib/token/ERC20.sol\\\";\\nimport \\\"./EtherTokenConstant.sol\\\";\\nimport \\\"./IsContract.sol\\\";\\nimport \\\"./IVaultRecoverable.sol\\\";\\nimport \\\"./SafeERC20.sol\\\";\\n\\n\\ncontract VaultRecoverable is IVaultRecoverable, EtherTokenConstant, IsContract {\\n    using SafeERC20 for ERC20;\\n\\n    string private constant ERROR_DISALLOWED = \\\"RECOVER_DISALLOWED\\\";\\n    string private constant ERROR_VAULT_NOT_CONTRACT = \\\"RECOVER_VAULT_NOT_CONTRACT\\\";\\n    string private constant ERROR_TOKEN_TRANSFER_FAILED = \\\"RECOVER_TOKEN_TRANSFER_FAILED\\\";\\n\\n    /**\\n     * @notice Send funds to recovery Vault. This contract should never receive funds,\\n     *         but in case it does, this function allows one to recover them.\\n     * @param _token Token balance to be sent to recovery vault.\\n     */\\n    function transferToVault(address _token) external {\\n        require(allowRecoverability(_token), ERROR_DISALLOWED);\\n        address vault = getRecoveryVault();\\n        require(isContract(vault), ERROR_VAULT_NOT_CONTRACT);\\n\\n        uint256 balance;\\n        if (_token == ETH) {\\n            balance = address(this).balance;\\n            vault.transfer(balance);\\n        } else {\\n            ERC20 token = ERC20(_token);\\n            balance = token.staticBalanceOf(this);\\n            require(token.safeTransfer(vault, balance), ERROR_TOKEN_TRANSFER_FAILED);\\n        }\\n\\n        emit RecoverToVault(vault, _token, balance);\\n    }\\n\\n    /**\\n    * @dev By default deriving from AragonApp makes it recoverable\\n    * @param token Token address that would be recovered\\n    * @return bool whether the app allows the recovery\\n    */\\n    function allowRecoverability(address token) public view returns (bool) {\\n        return true;\\n    }\\n\\n    // Cast non-implemented interface to be public so we can use it internally\\n    function getRecoveryVault() public view returns (address);\\n}\\n\",\"keccak256\":\"0xea4ded621a63f988b83ac27b4a23cad0a42c3d77bcf6ca7b88681ae4ea650cf4\"},\"@aragon/os/contracts/evmscript/EVMScriptRunner.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\nimport \\\"./IEVMScriptRegistry.sol\\\";\\n\\nimport \\\"../apps/AppStorage.sol\\\";\\nimport \\\"../kernel/KernelConstants.sol\\\";\\nimport \\\"../common/Initializable.sol\\\";\\n\\n\\ncontract EVMScriptRunner is AppStorage, Initializable, EVMScriptRegistryConstants, KernelNamespaceConstants {\\n    string private constant ERROR_EXECUTOR_UNAVAILABLE = \\\"EVMRUN_EXECUTOR_UNAVAILABLE\\\";\\n    string private constant ERROR_PROTECTED_STATE_MODIFIED = \\\"EVMRUN_PROTECTED_STATE_MODIFIED\\\";\\n\\n    /* This is manually crafted in assembly\\n    string private constant ERROR_EXECUTOR_INVALID_RETURN = \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\";\\n    */\\n\\n    event ScriptResult(address indexed executor, bytes script, bytes input, bytes returnData);\\n\\n    function getEVMScriptExecutor(bytes _script) public view returns (IEVMScriptExecutor) {\\n        return IEVMScriptExecutor(getEVMScriptRegistry().getScriptExecutor(_script));\\n    }\\n\\n    function getEVMScriptRegistry() public view returns (IEVMScriptRegistry) {\\n        address registryAddr = kernel().getApp(KERNEL_APP_ADDR_NAMESPACE, EVMSCRIPT_REGISTRY_APP_ID);\\n        return IEVMScriptRegistry(registryAddr);\\n    }\\n\\n    function runScript(bytes _script, bytes _input, address[] _blacklist)\\n        internal\\n        isInitialized\\n        protectState\\n        returns (bytes)\\n    {\\n        IEVMScriptExecutor executor = getEVMScriptExecutor(_script);\\n        require(address(executor) != address(0), ERROR_EXECUTOR_UNAVAILABLE);\\n\\n        bytes4 sig = executor.execScript.selector;\\n        bytes memory data = abi.encodeWithSelector(sig, _script, _input, _blacklist);\\n\\n        bytes memory output;\\n        assembly {\\n            let success := delegatecall(\\n                gas,                // forward all gas\\n                executor,           // address\\n                add(data, 0x20),    // calldata start\\n                mload(data),        // calldata length\\n                0,                  // don't write output (we'll handle this ourselves)\\n                0                   // don't write output\\n            )\\n\\n            output := mload(0x40) // free mem ptr get\\n\\n            switch success\\n            case 0 {\\n                // If the call errored, forward its full error data\\n                returndatacopy(output, 0, returndatasize)\\n                revert(output, returndatasize)\\n            }\\n            default {\\n                switch gt(returndatasize, 0x3f)\\n                case 0 {\\n                    // Need at least 0x40 bytes returned for properly ABI-encoded bytes values,\\n                    // revert with \\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\"\\n                    // See remix: doing a `revert(\\\"EVMRUN_EXECUTOR_INVALID_RETURN\\\")` always results in\\n                    // this memory layout\\n                    mstore(output, 0x08c379a000000000000000000000000000000000000000000000000000000000)         // error identifier\\n                    mstore(add(output, 0x04), 0x0000000000000000000000000000000000000000000000000000000000000020) // starting offset\\n                    mstore(add(output, 0x24), 0x000000000000000000000000000000000000000000000000000000000000001e) // reason length\\n                    mstore(add(output, 0x44), 0x45564d52554e5f4558454355544f525f494e56414c49445f52455455524e0000) // reason\\n\\n                    revert(output, 100) // 100 = 4 + 3 * 32 (error identifier + 3 words for the ABI encoded error)\\n                }\\n                default {\\n                    // Copy result\\n                    //\\n                    // Needs to perform an ABI decode for the expected `bytes` return type of\\n                    // `executor.execScript()` as solidity will automatically ABI encode the returned bytes as:\\n                    //    [ position of the first dynamic length return value = 0x20 (32 bytes) ]\\n                    //    [ output length (32 bytes) ]\\n                    //    [ output content (N bytes) ]\\n                    //\\n                    // Perform the ABI decode by ignoring the first 32 bytes of the return data\\n                    let copysize := sub(returndatasize, 0x20)\\n                    returndatacopy(output, 0x20, copysize)\\n\\n                    mstore(0x40, add(output, copysize)) // free mem ptr set\\n                }\\n            }\\n        }\\n\\n        emit ScriptResult(address(executor), _script, _input, output);\\n\\n        return output;\\n    }\\n\\n    modifier protectState {\\n        address preKernel = address(kernel());\\n        bytes32 preAppId = appId();\\n        _; // exec\\n        require(address(kernel()) == preKernel, ERROR_PROTECTED_STATE_MODIFIED);\\n        require(appId() == preAppId, ERROR_PROTECTED_STATE_MODIFIED);\\n    }\\n}\\n\",\"keccak256\":\"0xf8b4ccf7ee558224c155604a4a0b5cc35715367cda5010fb38e21d63ec5236c9\"},\"@aragon/os/contracts/evmscript/IEVMScriptExecutor.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ninterface IEVMScriptExecutor {\\n    function execScript(bytes script, bytes input, address[] blacklist) external returns (bytes);\\n    function executorType() external pure returns (bytes32);\\n}\\n\",\"keccak256\":\"0x76ad18a278e36e14147f5b58a1157de67ce95f28813f3e1eacfedaaf53dd33b9\"},\"@aragon/os/contracts/evmscript/IEVMScriptRegistry.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IEVMScriptExecutor.sol\\\";\\n\\n\\ncontract EVMScriptRegistryConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = apmNamehash(\\\"evmreg\\\");\\n    */\\n    bytes32 internal constant EVMSCRIPT_REGISTRY_APP_ID = 0xddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd61;\\n}\\n\\n\\ninterface IEVMScriptRegistry {\\n    function addScriptExecutor(IEVMScriptExecutor executor) external returns (uint id);\\n    function disableScriptExecutor(uint256 executorId) external;\\n\\n    // TODO: this should be external\\n    // See https://github.com/ethereum/solidity/issues/4832\\n    function getScriptExecutor(bytes script) public view returns (IEVMScriptExecutor);\\n}\\n\",\"keccak256\":\"0x66b255ac1537765d6e79cc0ed02df004e7bf214863773901e207baafd59dc2ce\"},\"@aragon/os/contracts/forwarding/IAbstractForwarder.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n* @title Abstract forwarder interface\\n* @dev This is the base interface for all forwarders.\\n*      Forwarding allows separately installed applications (smart contracts implementing the forwarding interface) to execute multi-step actions via EVM scripts.\\n*      You should only support the forwarding interface if your \\\"action step\\\" is asynchronous (e.g. requiring a delay period or a voting period).\\n*      Note: you should **NOT** directly inherit from this interface; see one of the other, non-abstract interfaces available.\\n*/\\ncontract IAbstractForwarder {\\n    enum ForwarderType {\\n        NOT_IMPLEMENTED,\\n        NO_CONTEXT,\\n        WITH_CONTEXT\\n    }\\n\\n    /**\\n    * @dev Tell whether the proposed forwarding path (an EVM script) from the given sender is allowed.\\n    *      However, this is not a strict guarantee of safety: the implemented `forward()` method is\\n    *      still allowed to revert even if `canForward()` returns true for the same parameters.\\n    * @return True if the sender's proposed path is allowed\\n    */\\n    function canForward(address sender, bytes evmScript) external view returns (bool);\\n\\n    /**\\n    * @dev Tell the forwarder type\\n    * @return Forwarder type\\n    */\\n    function forwarderType() external pure returns (ForwarderType);\\n\\n    /**\\n    * @dev Report whether the implementing app is a forwarder\\n    *      Required for backwards compatibility with aragonOS 4\\n    * @return Always true\\n    */\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x76ef48aa741c5deff4ed3454351e2c186df3453f73c44b84ce938e9dc1234d4a\"},\"@aragon/os/contracts/forwarding/IForwarder.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"./IAbstractForwarder.sol\\\";\\n\\n\\n/**\\n* @title Forwarder interface\\n* @dev This is the basic forwarder interface, that only supports forwarding an EVM script.\\n*      It does not support forwarding additional context or receiving ETH; other interfaces are available to support those.\\n*/\\ncontract IForwarder is IAbstractForwarder {\\n    /**\\n    * @dev Forward an EVM script\\n    */\\n    function forward(bytes evmScript) external;\\n\\n    /**\\n    * @dev Tell the forwarder type\\n    * @return Always 1 (ForwarderType.NO_CONTEXT)\\n    */\\n    function forwarderType() external pure returns (ForwarderType) {\\n        return ForwarderType.NO_CONTEXT;\\n    }\\n}\\n\",\"keccak256\":\"0xa78761e87483ec70f0134e9c8e8aa4ba06b29ca22215b5c9ce02ea9edbefa5a8\"},\"@aragon/os/contracts/kernel/IKernel.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\nimport \\\"../acl/IACL.sol\\\";\\nimport \\\"../common/IVaultRecoverable.sol\\\";\\n\\n\\ninterface IKernelEvents {\\n    event SetApp(bytes32 indexed namespace, bytes32 indexed appId, address app);\\n}\\n\\n\\n// This should be an interface, but interfaces can't inherit yet :(\\ncontract IKernel is IKernelEvents, IVaultRecoverable {\\n    function acl() public view returns (IACL);\\n    function hasPermission(address who, address where, bytes32 what, bytes how) public view returns (bool);\\n\\n    function setApp(bytes32 namespace, bytes32 appId, address app) public;\\n    function getApp(bytes32 namespace, bytes32 appId) public view returns (address);\\n}\\n\",\"keccak256\":\"0x96e9fd607b156a96905ec0108bb4fbcc5ad85212bb98e03600069bb5727d2daa\"},\"@aragon/os/contracts/kernel/KernelConstants.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract KernelAppIds {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_APP_ID = apmNamehash(\\\"kernel\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = apmNamehash(\\\"acl\\\");\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = apmNamehash(\\\"vault\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_APP_ID = 0x3b4bf6bf3ad5000ecf0f989d5befde585c6860fea3e574a4fab4c49d1c177d9c;\\n    bytes32 internal constant KERNEL_DEFAULT_ACL_APP_ID = 0xe3262375f45a6e2026b7e7b18c2b807434f2508fe1a2a3dfb493c7df8f4aad6a;\\n    bytes32 internal constant KERNEL_DEFAULT_VAULT_APP_ID = 0x7e852e0fcfce6551c13800f1e7476f982525c2b5277ba14b24339c68416336d1;\\n}\\n\\n\\ncontract KernelNamespaceConstants {\\n    /* Hardcoded constants to save gas\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = keccak256(\\\"core\\\");\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = keccak256(\\\"base\\\");\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = keccak256(\\\"app\\\");\\n    */\\n    bytes32 internal constant KERNEL_CORE_NAMESPACE = 0xc681a85306374a5ab27f0bbc385296a54bcd314a1948b6cf61c4ea1bc44bb9f8;\\n    bytes32 internal constant KERNEL_APP_BASES_NAMESPACE = 0xf1f3eb40f5bc1ad1344716ced8b8a0431d840b5783aea1fd01786bc26f35ac0f;\\n    bytes32 internal constant KERNEL_APP_ADDR_NAMESPACE = 0xd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb;\\n}\\n\",\"keccak256\":\"0x817f66cfc7bfafd19a4e6b1344850c5f7b72e39a1073fe862efebe608a07c0d3\"},\"@aragon/os/contracts/lib/math/SafeMath.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/d51e38758e1d985661534534d5c61e27bece5042/contracts/math/SafeMath.sol\\n// Adapted to use pragma ^0.4.24 and satisfy our linter rules\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title SafeMath\\n * @dev Math operations with safety checks that revert on error\\n */\\nlibrary SafeMath {\\n    string private constant ERROR_ADD_OVERFLOW = \\\"MATH_ADD_OVERFLOW\\\";\\n    string private constant ERROR_SUB_UNDERFLOW = \\\"MATH_SUB_UNDERFLOW\\\";\\n    string private constant ERROR_MUL_OVERFLOW = \\\"MATH_MUL_OVERFLOW\\\";\\n    string private constant ERROR_DIV_ZERO = \\\"MATH_DIV_ZERO\\\";\\n\\n    /**\\n    * @dev Multiplies two numbers, reverts on overflow.\\n    */\\n    function mul(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\\n        // benefit is lost if 'b' is also tested.\\n        // See: https://github.com/OpenZeppelin/openzeppelin-solidity/pull/522\\n        if (_a == 0) {\\n            return 0;\\n        }\\n\\n        uint256 c = _a * _b;\\n        require(c / _a == _b, ERROR_MUL_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Integer division of two numbers truncating the quotient, reverts on division by zero.\\n    */\\n    function div(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b > 0, ERROR_DIV_ZERO); // Solidity only automatically asserts when dividing by 0\\n        uint256 c = _a / _b;\\n        // assert(_a == _b * c + _a % _b); // There is no case in which this doesn't hold\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Subtracts two numbers, reverts on overflow (i.e. if subtrahend is greater than minuend).\\n    */\\n    function sub(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        require(_b <= _a, ERROR_SUB_UNDERFLOW);\\n        uint256 c = _a - _b;\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Adds two numbers, reverts on overflow.\\n    */\\n    function add(uint256 _a, uint256 _b) internal pure returns (uint256) {\\n        uint256 c = _a + _b;\\n        require(c >= _a, ERROR_ADD_OVERFLOW);\\n\\n        return c;\\n    }\\n\\n    /**\\n    * @dev Divides two numbers and returns the remainder (unsigned integer modulo),\\n    * reverts when dividing by zero.\\n    */\\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\\n        require(b != 0, ERROR_DIV_ZERO);\\n        return a % b;\\n    }\\n}\\n\",\"keccak256\":\"0x2e11c8dcead82c452ef452f4dbced40e20ae105fa4145d920dac6e077b31d846\"},\"@aragon/os/contracts/lib/standards/ERC165.sol\":{\"content\":\"/*\\n * SPDX-License-Identifier:    MIT\\n */\\n\\npragma solidity ^0.4.24;\\n\\n\\ncontract ERC165 {\\n    // Includes supportsInterface method:\\n    bytes4 internal constant ERC165_INTERFACE_ID = bytes4(0x01ffc9a7);\\n\\n    /**\\n    * @dev Query if a contract implements a certain interface\\n    * @param _interfaceId The interface identifier being queried, as specified in ERC-165\\n    * @return True if the contract implements the requested interface and if its not 0xffffffff, false otherwise\\n    */\\n    function supportsInterface(bytes4 _interfaceId) public pure returns (bool) {\\n        return _interfaceId == ERC165_INTERFACE_ID;\\n    }\\n}\\n\",\"keccak256\":\"0x6f67f6ece954fde87dd5e1696b4b759d18280d3e45ee54233744dee11ce1d4b5\"},\"@aragon/os/contracts/lib/token/ERC20.sol\":{\"content\":\"// See https://github.com/OpenZeppelin/openzeppelin-solidity/blob/a9f910d34f0ab33a1ae5e714f69f9596a02b4d91/contracts/token/ERC20/ERC20.sol\\n\\npragma solidity ^0.4.24;\\n\\n\\n/**\\n * @title ERC20 interface\\n * @dev see https://github.com/ethereum/EIPs/issues/20\\n */\\ncontract ERC20 {\\n    function totalSupply() public view returns (uint256);\\n\\n    function balanceOf(address _who) public view returns (uint256);\\n\\n    function allowance(address _owner, address _spender)\\n        public view returns (uint256);\\n\\n    function transfer(address _to, uint256 _value) public returns (bool);\\n\\n    function approve(address _spender, uint256 _value)\\n        public returns (bool);\\n\\n    function transferFrom(address _from, address _to, uint256 _value)\\n        public returns (bool);\\n\\n    event Transfer(\\n        address indexed from,\\n        address indexed to,\\n        uint256 value\\n    );\\n\\n    event Approval(\\n        address indexed owner,\\n        address indexed spender,\\n        uint256 value\\n    );\\n}\\n\",\"keccak256\":\"0xa2e319fde92f9e70912f09bf6e99bbf8b9b798961d54ffcba59d347d37bde1b7\"},\"contracts/HookedTokenManager.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\n/* solium-disable function-order */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/apps/AragonApp.sol\\\";\\nimport \\\"@aragon/os/contracts/forwarding/IForwarder.sol\\\";\\n\\nimport \\\"@aragon/os/contracts/lib/math/SafeMath.sol\\\";\\n\\nimport \\\"@aragon/minime/contracts/MiniMeToken.sol\\\";\\nimport \\\"@aragon/minime/contracts/ITokenController.sol\\\";\\n\\nimport \\\"./TokenManagerHook.sol\\\";\\n\\n\\ncontract HookedTokenManager is ITokenController, IForwarder, AragonApp {\\n    using SafeMath for uint256;\\n\\n    bytes32 public constant CHANGE_CONTROLLER_ROLE = keccak256(\\\"CHANGE_CONTROLLER_ROLE\\\");\\n    bytes32 public constant MINT_ROLE = keccak256(\\\"MINT_ROLE\\\");\\n    bytes32 public constant ISSUE_ROLE = keccak256(\\\"ISSUE_ROLE\\\");\\n    bytes32 public constant ASSIGN_ROLE = keccak256(\\\"ASSIGN_ROLE\\\");\\n    bytes32 public constant REVOKE_VESTINGS_ROLE = keccak256(\\\"REVOKE_VESTINGS_ROLE\\\");\\n    bytes32 public constant BURN_ROLE = keccak256(\\\"BURN_ROLE\\\");\\n    bytes32 public constant SET_HOOK_ROLE = keccak256(\\\"SET_HOOK_ROLE\\\");\\n\\n    uint256 public constant MAX_VESTINGS_PER_ADDRESS = 50;\\n\\n    string private constant ERROR_CALLER_NOT_TOKEN = \\\"TM_CALLER_NOT_TOKEN\\\";\\n    string private constant ERROR_NO_VESTING = \\\"TM_NO_VESTING\\\";\\n    string private constant ERROR_TOKEN_CONTROLLER = \\\"TM_TOKEN_CONTROLLER\\\";\\n    string private constant ERROR_MINT_RECEIVER_IS_TM = \\\"TM_MINT_RECEIVER_IS_TM\\\";\\n    string private constant ERROR_VESTING_TO_TM = \\\"TM_VESTING_TO_TM\\\";\\n    string private constant ERROR_TOO_MANY_VESTINGS = \\\"TM_TOO_MANY_VESTINGS\\\";\\n    string private constant ERROR_WRONG_CLIFF_DATE = \\\"TM_WRONG_CLIFF_DATE\\\";\\n    string private constant ERROR_VESTING_NOT_REVOKABLE = \\\"TM_VESTING_NOT_REVOKABLE\\\";\\n    string private constant ERROR_REVOKE_TRANSFER_FROM_REVERTED = \\\"TM_REVOKE_TRANSFER_FROM_REVERTED\\\";\\n    string private constant ERROR_NO_WRAPPABLE_TOKEN = \\\"TM_NO_WRAPPABLE_TOKEN\\\";\\n    string private constant ERROR_SAFE_TRANSFER_FAILED = \\\"TM_SAFE_TRANSFER_FAILED\\\";\\n    string private constant ERROR_CAN_NOT_FORWARD = \\\"TM_CAN_NOT_FORWARD\\\";\\n    string private constant ERROR_BALANCE_INCREASE_NOT_ALLOWED = \\\"TM_BALANCE_INC_NOT_ALLOWED\\\";\\n    string private constant ERROR_ASSIGN_TRANSFER_FROM_REVERTED = \\\"TM_ASSIGN_TRANSFER_FROM_REVERTED\\\";\\n\\n    struct TokenVesting {\\n        uint256 amount;\\n        uint64 start;\\n        uint64 cliff;\\n        uint64 vesting;\\n        bool revokable;\\n    }\\n\\n    // Note that we COMPLETELY trust this MiniMeToken to not be malicious for proper operation of this contract\\n    MiniMeToken public token;\\n    ERC20 public wrappableToken;\\n    uint256 public maxAccountTokens;\\n\\n    // We are mimicing an array in the inner mapping, we use a mapping instead to make app upgrade more graceful\\n    mapping (address => mapping (uint256 => TokenVesting)) internal vestings;\\n    mapping (address => uint256) public vestingsLengths;\\n\\n    mapping (uint256 => TokenManagerHook) public hooks;\\n    uint256 public hooksLength;\\n\\n    // Other token specific events can be watched on the token address directly (avoids duplication)\\n    event TokenManagerInitialized(address token, address wrappableToken);\\n    event NewVesting(address indexed receiver, uint256 vestingId, uint256 amount);\\n    event RevokeVesting(address indexed receiver, uint256 vestingId, uint256 nonVestedAmount);\\n\\n    modifier onlyToken() {\\n        require(msg.sender == address(token), ERROR_CALLER_NOT_TOKEN);\\n        _;\\n    }\\n\\n    modifier vestingExists(address _holder, uint256 _vestingId) {\\n        // TODO: it's not checking for gaps that may appear because of deletes in revokeVesting function\\n        require(_vestingId < vestingsLengths[_holder], ERROR_NO_VESTING);\\n        _;\\n    }\\n\\n    /**\\n    * @notice Initialize Token Manager for `_token.symbol(): string`, whose tokens are `_transferable ? '' : 'not'` transferable`_maxAccountTokens > 0 ? ' and limited to a maximum of ' + @tokenAmount(_token, _maxAccountTokens, false) + ' per account' : ''`\\n    * @param _token MiniMeToken address for the managed token (Token Manager instance must be already set as the token controller)\\n    * @param _wrappableToken Token which can be wrapped/unwrapped to generate an equal number of the MiniMeToken. Set to address(0) to disable.\\n    * @param _transferable whether the token can be transferred by holders\\n    * @param _maxAccountTokens Maximum amount of tokens an account can have (0 for infinite tokens)\\n    */\\n    function initialize(\\n        MiniMeToken _token,\\n        ERC20 _wrappableToken,\\n        bool _transferable,\\n        uint256 _maxAccountTokens\\n    )\\n        external\\n        onlyInit\\n    {\\n        initialized();\\n\\n        require(_token.controller() == address(this), ERROR_TOKEN_CONTROLLER);\\n\\n        token = _token;\\n        wrappableToken = _wrappableToken;\\n        maxAccountTokens = _maxAccountTokens == 0 ? uint256(-1) : _maxAccountTokens;\\n\\n        if (token.transfersEnabled() != _transferable) {\\n            token.enableTransfers(_transferable);\\n        }\\n\\n        emit TokenManagerInitialized(_token, _wrappableToken);\\n    }\\n\\n    /**\\n    * @notice Change the token controller to `_newController`\\n    * @param _newController Address to transfer control of the token\\n    */\\n    function changeTokenController(address _newController) external authP(CHANGE_CONTROLLER_ROLE, arr(_newController)) {\\n        token.changeController(_newController);\\n    }\\n\\n    /**\\n    * @notice Create a new Token Manager hook for `_hook`\\n    * @param _hook Contract that will be used as Token Manager hook\\n    */\\n    function registerHook(address _hook) external authP(SET_HOOK_ROLE, arr(_hook)) returns (uint256) {\\n        uint256 hookId = hooksLength++;\\n        hooks[hookId] = TokenManagerHook(_hook);\\n        hooks[hookId].onRegisterAsHook(hookId, token);\\n        return hookId;\\n    }\\n\\n    /**\\n    * @notice Revoke Token Manager hook #`_hookId`\\n    * @param _hookId Position of the hook to be removed\\n    */\\n    function revokeHook(uint256 _hookId) external authP(SET_HOOK_ROLE, arr(_hookId)) {\\n        hooks[_hookId].onRevokeAsHook(_hookId, token);\\n        delete hooks[_hookId];\\n    }\\n\\n    /**\\n    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for `_receiver`\\n    * @param _receiver The address receiving the tokens, cannot be the Token Manager itself (use `issue()` instead)\\n    * @param _amount Number of tokens minted\\n    */\\n    function mint(address _receiver, uint256 _amount) external authP(MINT_ROLE, arr(_receiver, _amount)) {\\n        require(_receiver != address(this), ERROR_MINT_RECEIVER_IS_TM);\\n        _mint(_receiver, _amount);\\n    }\\n\\n    /**\\n    * @notice Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for the Token Manager\\n    * @param _amount Number of tokens minted\\n    */\\n    function issue(uint256 _amount) external authP(ISSUE_ROLE, arr(_amount)) {\\n        _mint(address(this), _amount);\\n    }\\n\\n    /**\\n    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings\\n    * @param _receiver The address receiving the tokens\\n    * @param _amount Number of tokens transferred\\n    */\\n    function assign(address _receiver, uint256 _amount) external authP(ASSIGN_ROLE, arr(_receiver, _amount)) {\\n        _assign(_receiver, _amount);\\n    }\\n\\n    /**\\n    * @notice Burn `@tokenAmount(self.token(): address, _amount, false)` tokens from `_holder`\\n    * @param _holder Holder of tokens being burned\\n    * @param _amount Number of tokens being burned\\n    */\\n    function burn(address _holder, uint256 _amount) external authP(BURN_ROLE, arr(_holder, _amount)) {\\n        _burn(_holder, _amount);\\n    }\\n\\n    /**\\n    * @notice Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings with a `_revokable : 'revokable' : ''` vesting starting at `@formatDate(_start)`, cliff at `@formatDate(_cliff)` (first portion of tokens transferable), and completed vesting at `@formatDate(_vested)` (all tokens transferable)\\n    * @param _receiver The address receiving the tokens, cannot be Token Manager itself\\n    * @param _amount Number of tokens vested\\n    * @param _start Date the vesting calculations start\\n    * @param _cliff Date when the initial portion of tokens are transferable\\n    * @param _vested Date when all tokens are transferable\\n    * @param _revokable Whether the vesting can be revoked by the Token Manager\\n    */\\n    function assignVested(\\n        address _receiver,\\n        uint256 _amount,\\n        uint64 _start,\\n        uint64 _cliff,\\n        uint64 _vested,\\n        bool _revokable\\n    )\\n        external\\n        authP(ASSIGN_ROLE, arr(_receiver, _amount))\\n        returns (uint256)\\n    {\\n        require(_receiver != address(this), ERROR_VESTING_TO_TM);\\n        require(vestingsLengths[_receiver] < MAX_VESTINGS_PER_ADDRESS, ERROR_TOO_MANY_VESTINGS);\\n        require(_start <= _cliff && _cliff <= _vested, ERROR_WRONG_CLIFF_DATE);\\n\\n        uint256 vestingId = vestingsLengths[_receiver]++;\\n        vestings[_receiver][vestingId] = TokenVesting(\\n            _amount,\\n            _start,\\n            _cliff,\\n            _vested,\\n            _revokable\\n        );\\n\\n        _assign(_receiver, _amount);\\n\\n        emit NewVesting(_receiver, vestingId, _amount);\\n\\n        return vestingId;\\n    }\\n\\n    /**\\n    * @notice Revoke vesting #`_vestingId` from `_holder`, returning unvested tokens to the Token Manager\\n    * @param _holder Address whose vesting to revoke\\n    * @param _vestingId Numeric id of the vesting\\n    */\\n    function revokeVesting(address _holder, uint256 _vestingId)\\n        external\\n        authP(REVOKE_VESTINGS_ROLE, arr(_holder))\\n        vestingExists(_holder, _vestingId)\\n    {\\n        TokenVesting storage v = vestings[_holder][_vestingId];\\n        require(v.revokable, ERROR_VESTING_NOT_REVOKABLE);\\n\\n        uint256 nonVested = _calculateNonVestedTokens(\\n            v.amount,\\n            getTimestamp(),\\n            v.start,\\n            v.cliff,\\n            v.vesting\\n        );\\n\\n        // To make vestingIds immutable over time, we just zero out the revoked vesting\\n        // Clearing this out also allows the token transfer back to the Token Manager to succeed\\n        delete vestings[_holder][_vestingId];\\n\\n        // transferFrom always works as controller\\n        // onTransfer hook always allows if transfering to token controller\\n        require(token.transferFrom(_holder, address(this), nonVested), ERROR_REVOKE_TRANSFER_FROM_REVERTED);\\n\\n        emit RevokeVesting(_holder, _vestingId, nonVested);\\n    }\\n\\n    /**\\n    * @notice Wrap @tokenAmount(self.wrappableToken(): address, _amount, false) to receive @tokenAmount(self.token(): address, _amount, false)\\n    * @param _amount Amount of tokens to wrap\\n    */\\n    function wrap(uint256 _amount) external {\\n        require(wrappableToken != address(0), ERROR_NO_WRAPPABLE_TOKEN);\\n        require(msg.sender != address(this), ERROR_MINT_RECEIVER_IS_TM);\\n\\n        require(wrappableToken.safeTransferFrom(msg.sender, address(this), _amount), ERROR_SAFE_TRANSFER_FAILED);\\n        _mint(msg.sender, _amount);\\n    }\\n\\n    /**\\n    * @notice Unwrap @tokenAmount(self.token(): address, _amount, false) to receive @tokenAmount(self.wrappableToken(): address, _amount, false)\\n    * @param _amount Amount of tokens to unwrap\\n    */\\n    function unwrap(uint256 _amount) external {\\n        require(wrappableToken != address(0), ERROR_NO_WRAPPABLE_TOKEN);\\n        require(msg.sender != address(this), ERROR_MINT_RECEIVER_IS_TM);\\n\\n        _burn(msg.sender, _amount);\\n        require(wrappableToken.safeTransfer(msg.sender, _amount), ERROR_SAFE_TRANSFER_FAILED);\\n    }\\n\\n    // ITokenController fns\\n    // `onTransfer()`, `onApprove()`, and `proxyPayment()` are callbacks from the MiniMe token\\n    // contract and are only meant to be called through the managed MiniMe token that gets assigned\\n    // during initialization.\\n\\n    /*\\n    * @dev Notifies the controller about a token transfer allowing the controller to decide whether\\n    *      to allow it or react if desired (only callable from the token).\\n    *      Initialization check is implicitly provided by `onlyToken()`.\\n    * @param _from The origin of the transfer\\n    * @param _to The destination of the transfer\\n    * @param _amount The amount of the transfer\\n    * @return False if the controller does not authorize the transfer\\n    */\\n    function onTransfer(address _from, address _to, uint256 _amount) external onlyToken returns (bool) {\\n        if (_isBalanceIncreaseAllowed(_to, _amount) && _transferableBalance(_from, getTimestamp()) >= _amount) {\\n            return _triggerOnTransferHook(_from, _to, _amount);\\n        }\\n        return false;\\n    }\\n\\n    /**\\n    * @dev Notifies the controller about an approval allowing the controller to react if desired\\n    *      Initialization check is implicitly provided by `onlyToken()`.\\n    * @return False if the controller does not authorize the approval\\n    */\\n    function onApprove(address _holder, address _spender, uint _amount) external onlyToken returns (bool) {\\n        return _triggerOnApproveHook(_holder, _spender, _amount);\\n    }\\n\\n    /**\\n    * @dev Called when ether is sent to the MiniMe Token contract\\n    *      Initialization check is implicitly provided by `onlyToken()`.\\n    * @return True if the ether is accepted, false for it to throw\\n    */\\n    function proxyPayment(address) external payable onlyToken returns (bool) {\\n        return false;\\n    }\\n\\n    // Forwarding fns\\n\\n    function isForwarder() external pure returns (bool) {\\n        return true;\\n    }\\n\\n    /**\\n    * @notice Execute desired action as a token holder\\n    * @dev IForwarder interface conformance. Forwards any token holder action.\\n    * @param _evmScript Script being executed\\n    */\\n    function forward(bytes _evmScript) external {\\n        require(_canForward(msg.sender), ERROR_CAN_NOT_FORWARD);\\n        bytes memory input = new bytes(0); // TODO: Consider input for this\\n\\n        // Add the managed token to the blacklist to disallow a token holder from executing actions\\n        // on the token controller's (this contract) behalf\\n        address[] memory blacklist = new address[](2);\\n        blacklist[0] = address(token);\\n        blacklist[1] = address(wrappableToken);\\n\\n        runScript(_evmScript, input, blacklist);\\n    }\\n\\n    function canForward(address _sender, bytes) external view returns (bool) {\\n        return _canForward(_sender);\\n    }\\n\\n    // Getter fns\\n\\n    function getVesting(\\n        address _recipient,\\n        uint256 _vestingId\\n    )\\n        public\\n        view\\n        vestingExists(_recipient, _vestingId)\\n        returns (\\n            uint256 amount,\\n            uint64 start,\\n            uint64 cliff,\\n            uint64 vesting,\\n            bool revokable\\n        )\\n    {\\n        TokenVesting storage tokenVesting = vestings[_recipient][_vestingId];\\n        amount = tokenVesting.amount;\\n        start = tokenVesting.start;\\n        cliff = tokenVesting.cliff;\\n        vesting = tokenVesting.vesting;\\n        revokable = tokenVesting.revokable;\\n    }\\n\\n    function spendableBalanceOf(address _holder) public view isInitialized returns (uint256) {\\n        return _transferableBalance(_holder, getTimestamp());\\n    }\\n\\n    function transferableBalance(address _holder, uint256 _time) public view isInitialized returns (uint256) {\\n        return _transferableBalance(_holder, _time);\\n    }\\n\\n    /**\\n    * @dev Disable recovery escape hatch for own token,\\n    *      as the it has the concept of issuing tokens without assigning them\\n    */\\n    function allowRecoverability(address _token) public view returns (bool) {\\n        return _token == ETH || (_token != address(token) && _token != address(wrappableToken));\\n    }\\n\\n    // Internal fns\\n\\n    function _assign(address _receiver, uint256 _amount) internal {\\n        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\\n        // Must use transferFrom() as transfer() does not give the token controller full control\\n        require(token.transferFrom(address(this), _receiver, _amount), ERROR_ASSIGN_TRANSFER_FROM_REVERTED);\\n    }\\n\\n    function _mint(address _receiver, uint256 _amount) internal {\\n        require(_isBalanceIncreaseAllowed(_receiver, _amount), ERROR_BALANCE_INCREASE_NOT_ALLOWED);\\n        _triggerOnTransferHook(0x0, _receiver, _amount);\\n        token.generateTokens(_receiver, _amount); // minime.generateTokens() never returns false\\n    }\\n\\n    function _burn(address _holder, uint256 _amount) internal {\\n        _triggerOnTransferHook(_holder, 0x0, _amount);\\n        // minime.destroyTokens() never returns false, only reverts on failure\\n        token.destroyTokens(_holder, _amount);\\n    }\\n\\n    function _isBalanceIncreaseAllowed(address _receiver, uint256 _inc) internal view returns (bool) {\\n        // Max balance doesn't apply to the token manager itself\\n        if (_receiver == address(this)) {\\n            return true;\\n        }\\n        return token.balanceOf(_receiver).add(_inc) <= maxAccountTokens;\\n    }\\n\\n    /**\\n    * @dev Calculate amount of non-vested tokens at a specifc time\\n    * @param tokens The total amount of tokens vested\\n    * @param time The time at which to check\\n    * @param start The date vesting started\\n    * @param cliff The cliff period\\n    * @param vested The fully vested date\\n    * @return The amount of non-vested tokens of a specific grant\\n    *  transferableTokens\\n    *   |                         _/--------   vestedTokens rect\\n    *   |                       _/\\n    *   |                     _/\\n    *   |                   _/\\n    *   |                 _/\\n    *   |                /\\n    *   |              .|\\n    *   |            .  |\\n    *   |          .    |\\n    *   |        .      |\\n    *   |      .        |\\n    *   |    .          |\\n    *   +===+===========+---------+----------> time\\n    *      Start       Cliff    Vested\\n    */\\n    function _calculateNonVestedTokens(\\n        uint256 tokens,\\n        uint256 time,\\n        uint256 start,\\n        uint256 cliff,\\n        uint256 vested\\n    )\\n        private\\n        pure\\n        returns (uint256)\\n    {\\n        // Shortcuts for before cliff and after vested cases.\\n        if (time >= vested) {\\n            return 0;\\n        }\\n        if (time < cliff) {\\n            return tokens;\\n        }\\n\\n        // Interpolate all vested tokens.\\n        // As before cliff the shortcut returns 0, we can just calculate a value\\n        // in the vesting rect (as shown in above's figure)\\n\\n        // vestedTokens = tokens * (time - start) / (vested - start)\\n        // In assignVesting we enforce start <= cliff <= vested\\n        // Here we shortcut time >= vested and time < cliff,\\n        // so no division by 0 is possible\\n        uint256 vestedTokens = tokens.mul(time.sub(start)) / vested.sub(start);\\n\\n        // tokens - vestedTokens\\n        return tokens.sub(vestedTokens);\\n    }\\n\\n    function _transferableBalance(address _holder, uint256 _time) internal view returns (uint256) {\\n        uint256 transferable = token.balanceOf(_holder);\\n\\n        // This check is not strictly necessary for the current version of this contract, as\\n        // Token Managers now cannot assign vestings to themselves.\\n        // However, this was a possibility in the past, so in case there were vestings assigned to\\n        // themselves, this will still return the correct value (entire balance, as the Token\\n        // Manager does not have a spending limit on its own balance).\\n        if (_holder != address(this)) {\\n            uint256 vestingsCount = vestingsLengths[_holder];\\n            for (uint256 i = 0; i < vestingsCount; i++) {\\n                TokenVesting storage v = vestings[_holder][i];\\n                uint256 nonTransferable = _calculateNonVestedTokens(\\n                    v.amount,\\n                    _time,\\n                    v.start,\\n                    v.cliff,\\n                    v.vesting\\n                );\\n                transferable = transferable.sub(nonTransferable);\\n            }\\n        }\\n\\n        return transferable;\\n    }\\n\\n    function _triggerOnApproveHook(address _holder, address _spender, uint _amount) internal returns (bool approved) {\\n        approved = true;\\n        uint256 i = 0;\\n        while (approved && i < hooksLength) {\\n            if (address(hooks[i]) != 0) {\\n                approved = hooks[i].onApprove(_holder, _spender, _amount);\\n            }\\n            i++;\\n        }\\n    }\\n\\n    function _triggerOnTransferHook(address _from, address _to, uint256 _amount) internal returns (bool transferable) {\\n        transferable = true;\\n        uint256 i = 0;\\n        while (transferable && i < hooksLength) {\\n            if (address(hooks[i]) != 0) {\\n                transferable = hooks[i].onTransfer(_from, _to, _amount);\\n            }\\n            i++;\\n        }\\n    }\\n\\n    function _canForward(address _sender) internal view returns (bool) {\\n        return hasInitialized() && token.balanceOf(_sender) > 0;\\n    }\\n}\\n\",\"keccak256\":\"0xfdbc6798e2999f9a9774adaa067145840913992d2da869e874d798ed8c748bbc\"},\"contracts/TokenManagerHook.sol\":{\"content\":\"/*\\n * SPDX-License-Identitifer:    GPL-3.0-or-later\\n */\\n\\npragma solidity 0.4.24;\\n\\nimport \\\"@aragon/os/contracts/common/ReentrancyGuard.sol\\\";\\n\\n/**\\n* @dev When creating a subcontract, we recommend overriding the _internal_ functions that you want to hook.\\n*/\\ncontract TokenManagerHook is ReentrancyGuard {\\n\\n    using UnstructuredStorage for bytes32;\\n\\n    /* Hardcoded constants to save gas\\n    bytes32 public constant TOKEN_MANAGER_POSITION = keccak256(\\\"hookedTokenManager.tokenManagerHook.tokenManager\\\");\\n    */\\n    bytes32 private constant TOKEN_MANAGER_POSITION = 0x5c513b2347f66d33af9d68f4a0ed7fbb73ce364889b2af7f3ee5764440da6a8a;\\n\\n    modifier onlyTokenManager() {\\n        require (getTokenManager() == msg.sender, \\\"Hooks must be called from Token Manager\\\");\\n        _;\\n    }\\n\\n    function getTokenManager() public returns (address) {\\n        return TOKEN_MANAGER_POSITION.getStorageAddress();\\n    }\\n\\n    /*\\n    * @dev Called when this contract has been included as a Token Manager hook\\n    * @param _hookId The position in which the hook is going to be called\\n    * @param _token The token controlled by the Token Manager\\n    */\\n    function onRegisterAsHook(uint256 _hookId, address _token) external nonReentrant {\\n        require(getTokenManager() == address(0), \\\"Hook already registered by Token Manager\\\");\\n        TOKEN_MANAGER_POSITION.setStorageAddress(msg.sender);\\n        _onRegisterAsHook(msg.sender, _hookId, _token);\\n    }\\n\\n    /*\\n    * @dev Called when this hook is being removed from the Token Manager\\n    * @param _hookId The position in which the hook is going to be called\\n    * @param _token The token controlled by the Token Manager\\n    */\\n    function onRevokeAsHook(uint256 _hookId, address _token) external onlyTokenManager nonReentrant {\\n        _onRevokeAsHook(msg.sender, _hookId, _token);\\n    }\\n\\n    /*\\n    * @dev Notifies the hook about a token transfer allowing the hook to react if desired. It should return\\n    * true if left unimplemented, otherwise it will prevent some functions in the TokenManager from\\n    * executing successfully.\\n    * @param _from The origin of the transfer\\n    * @param _to The destination of the transfer\\n    * @param _amount The amount of the transfer\\n    */\\n    function onTransfer(address _from, address _to, uint256 _amount) external onlyTokenManager nonReentrant returns (bool) {\\n        return _onTransfer(_from, _to, _amount);\\n    }\\n\\n    /*\\n    * @dev Notifies the hook about an approval allowing the hook to react if desired. It should return\\n    * true if left unimplemented, otherwise it will prevent some functions in the TokenManager from\\n    * executing successfully.\\n    * @param _holder The account that is allowing to spend\\n    * @param _spender The account that is allowed to spend\\n    * @param _amount The amount being allowed\\n    */\\n    function onApprove(address _holder, address _spender, uint _amount) external onlyTokenManager nonReentrant returns (bool) {\\n        return _onApprove(_holder, _spender, _amount);\\n    }\\n\\n    // Function to override if necessary:\\n\\n    function _onRegisterAsHook(address _tokenManager, uint256 _hookId, address _token) internal {\\n        return;\\n    }\\n\\n    function _onRevokeAsHook(address _tokenManager, uint256 _hookId, address _token) internal {\\n        return;\\n    }\\n\\n    function _onTransfer(address _from, address _to, uint256 _amount) internal returns (bool) {\\n        return true;\\n    }\\n\\n    function _onApprove(address _holder, address _spender, uint _amount) internal returns (bool) {\\n        return true;\\n    }\\n}\\n\",\"keccak256\":\"0x2a802439a83a161526e585b133bc2610a01f17ef2e93baf0b5b28131f58ddb5b\"}},\"version\":1}",
  "bytecode": "0x6080604052620000176401000000006200001d810204565b6200023b565b6200003064010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a45440000000000000000602082015290156200010c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015620000d0578181015183820152602001620000b6565b50505050905090810190601f168015620000fe5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b506200012360001964010000000062000154810204565b565b60006200014f6000805160206200526e83398151915264010000000062003f836200023382021704565b905090565b6200016764010000000062000125810204565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a454400000000000000006020820152901562000206576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015620000d0578181015183820152602001620000b6565b50620002306000805160206200526e8339815191528264010000000062004f316200023782021704565b50565b5490565b9055565b615023806200024b6000396000f3006080604052600436106102455763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461024a5780630803fac0146102985780630db3971b146102ad5780630f8f8b83146102d45780631dfab0351461030257806321cb18cd146103405780632914b9bd1461038f57806332f0a3b5146103e85780633e05a36d146103fd57806340c10f19146104675780634a191c0d1461049a5780634a393149146104af57806357d0c179146104e65780636354b6611461051f57806372f8393c1461054d57806374c46e431461057e5780637e7db6e11461059357806380afdea8146105c1578063856222f1146105d6578063864c17d7146105eb5780638b3dd7491461060357806397f2562a146106185780639d4941d8146106465780639dc29fac14610674578063a1658fad146106a5578063a479e50814610719578063a51d9a8e1461072e578063b80fc15a14610743578063b930908f1461075b578063be76048814610770578063c0774df3146107a1578063cc872b66146107db578063d4aae0c4146107f3578063d6c8976b14610808578063d948d46814610836578063da682aeb14610856578063de0e9a3e1461088d578063de4796ed146108a5578063e9a9c850146108ba578063ea598cb0146108cf578063ecfda432146108e7578063edc168f1146108fc578063effb952314610911578063f48c30541461094d578063f68e73041461096e578063fa6799f214610983578063fc0c546a146109b4578063fd64eccb146109c9575b600080fd5b34801561025657600080fd5b506102847fffffffff00000000000000000000000000000000000000000000000000000000600435166109de565b604080519115158252519081900360200190f35b3480156102a457600080fd5b50610284610a3b565b3480156102b957600080fd5b506102c2610a64565b60408051918252519081900360200190f35b3480156102e057600080fd5b506102c273ffffffffffffffffffffffffffffffffffffffff60043516610a69565b34801561030e57600080fd5b50610317610b5e565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561034c57600080fd5b506102c273ffffffffffffffffffffffffffffffffffffffff6004351660243567ffffffffffffffff6044358116906064358116906084351660a4351515610b7a565b34801561039b57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103179436949293602493928401919081908401838280828437509497506110c19650505050505050565b3480156103f457600080fd5b506103176111cd565b34801561040957600080fd5b5061042e73ffffffffffffffffffffffffffffffffffffffff6004351660243561126b565b6040805195865267ffffffffffffffff948516602087015292841685840152921660608401529015156080830152519081900360a00190f35b34801561047357600080fd5b5061049873ffffffffffffffffffffffffffffffffffffffff600435166024356113f4565b005b3480156104a657600080fd5b506102c261159e565b3480156104bb57600080fd5b5061028473ffffffffffffffffffffffffffffffffffffffff600435811690602435166044356115d3565b3480156104f257600080fd5b506104fb6116ce565b6040518082600281111561050b57fe5b60ff16815260200191505060405180910390f35b34801561052b57600080fd5b506102c273ffffffffffffffffffffffffffffffffffffffff600435166116d3565b34801561055957600080fd5b506102c273ffffffffffffffffffffffffffffffffffffffff6004351660243561189c565b34801561058a57600080fd5b506102c261194e565b34801561059f57600080fd5b5061028473ffffffffffffffffffffffffffffffffffffffff60043516611954565b3480156105cd57600080fd5b506102c26119bd565b3480156105e257600080fd5b506102c26119ed565b3480156105f757600080fd5b50610317600435611a22565b34801561060f57600080fd5b506102c2611a4a565b34801561062457600080fd5b506102c273ffffffffffffffffffffffffffffffffffffffff60043516611a75565b34801561065257600080fd5b5061049873ffffffffffffffffffffffffffffffffffffffff60043516611a87565b34801561068057600080fd5b5061049873ffffffffffffffffffffffffffffffffffffffff60043516602435611da9565b3480156106b157600080fd5b50604080516020600460443581810135838102808601850190965280855261028495833573ffffffffffffffffffffffffffffffffffffffff16956024803596369695606495939492019291829185019084908082843750949750611e989650505050505050565b34801561072557600080fd5b50610317612028565b34801561073a57600080fd5b506102c26120ea565b34801561074f57600080fd5b5061049860043561211f565b34801561076757600080fd5b506102c26122d5565b34801561077c57600080fd5b5061049873ffffffffffffffffffffffffffffffffffffffff6004351660243561230a565b3480156107ad57600080fd5b506102846004803573ffffffffffffffffffffffffffffffffffffffff1690602480359081019101356123f9565b3480156107e757600080fd5b5061049860043561240c565b3480156107ff57600080fd5b506103176124ff565b34801561081457600080fd5b5061049873ffffffffffffffffffffffffffffffffffffffff6004351661252a565b34801561084257600080fd5b50610498600480356024810191013561269c565b34801561086257600080fd5b5061028473ffffffffffffffffffffffffffffffffffffffff60043581169060243516604435612830565b34801561089957600080fd5b506104986004356128f3565b3480156108b157600080fd5b50610284612b1e565b3480156108c657600080fd5b506102c2612b4f565b3480156108db57600080fd5b50610498600435612b84565b3480156108f357600080fd5b506102c2612db0565b34801561090857600080fd5b506102c2612db6565b34801561091d57600080fd5b5061049873ffffffffffffffffffffffffffffffffffffffff600435811690602435166044351515606435612deb565b61028473ffffffffffffffffffffffffffffffffffffffff60043516613218565b34801561097a57600080fd5b506102c26132d8565b34801561098f57600080fd5b5061049873ffffffffffffffffffffffffffffffffffffffff6004351660243561330d565b3480156109c057600080fd5b506103176137ea565b3480156109d557600080fd5b506102846116ce565b60006109e982613806565b80610a3557507fffffffff0000000000000000000000000000000000000000000000000000000082167f54053e6c00000000000000000000000000000000000000000000000000000000145b92915050565b600080610a46611a4a565b90508015801590610a5e575080610a5b613850565b10155b91505090565b603281565b6000610a73610a3b565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a45440000000000000000000000006020820152901515610b4c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b11578181015183820152602001610af9565b50505050905090810190601f168015610b3e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610a3582610b59613854565b613858565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b604080517f41535349474e5f524f4c450000000000000000000000000000000000000000008152905190819003600b0190206000908190610bbb89896139f8565b610bc6338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515610c63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5060408051808201909152601081527f544d5f56455354494e475f544f5f544d00000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff8b16301415610d18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5073ffffffffffffffffffffffffffffffffffffffff8a16600090815260046020908152604091829020548251808401909352601483527f544d5f544f4f5f4d414e595f56455354494e475300000000000000000000000091830191909152603211610de0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b508667ffffffffffffffff168867ffffffffffffffff1611158015610e1957508567ffffffffffffffff168767ffffffffffffffff1611155b60408051808201909152601381527f544d5f57524f4e475f434c4946465f44415445000000000000000000000000006020820152901515610eb6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055925060a0604051908101604052808a81526020018967ffffffffffffffff1681526020018867ffffffffffffffff1681526020018767ffffffffffffffff168152602001861515815250600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160010160186101000a81548160ff0219169083151502179055509050506110638a8a613a1a565b60408051848152602081018b9052815173ffffffffffffffffffffffffffffffffffffffff8d16927f627ad26dcfe82ec79b33fda0ddd062f6fab9f4914acac8345f79090dfd86fb54928290030190a2509098975050505050505050565b60006110cb612028565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561114f578181015183820152602001611137565b50505050905090810190601f16801561117c5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561119b57600080fd5b505af11580156111af573d6000803e3d6000fd5b505050506040513d60208110156111c557600080fd5b505192915050565b60006111d76124ff565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561123a57600080fd5b505af115801561124e573d6000803e3d6000fd5b505050506040513d602081101561126457600080fd5b5051905090565b6000806000806000808787600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481106040805190810160405280600d81526020017f544d5f4e4f5f56455354494e4700000000000000000000000000000000000000815250901515611357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5050505073ffffffffffffffffffffffffffffffffffffffff969096166000908152600360209081526040808320978352969052949094208054600190910154909667ffffffffffffffff8083169750680100000000000000008304811696507001000000000000000000000000000000008304169450780100000000000000000000000000000000000000000000000090910460ff1692509050565b604080517f4d494e545f524f4c4500000000000000000000000000000000000000000000008152905190819003600901902061143083836139f8565b61143b338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156114d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5060408051808201909152601681527f544d5f4d494e545f52454345495645525f49535f544d00000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff851630141561158d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506115988484613c10565b50505050565b604080517f4348414e47455f434f4e54524f4c4c45525f524f4c45000000000000000000008152905190819003601601902081565b6000805460408051808201909152601381527f544d5f43414c4c45525f4e4f545f544f4b454e0000000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff16331461168a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506116958383613d6e565b80156116ac5750816116a985610b59613854565b10155b156116c3576116bc848484613e58565b90506116c7565b5060005b9392505050565b600190565b604080517f5345545f484f4f4b5f524f4c45000000000000000000000000000000000000008152905190819003600d019020600090819061171384613f62565b61171e338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156117bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50600680546001810190915560008181526005602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a81169190911791829055835483517f4d4eb6ce00000000000000000000000000000000000000000000000000000000815260048101879052908216602482015292519497501692634d4eb6ce9260448084019391929182900301818387803b15801561187b57600080fd5b505af115801561188f573d6000803e3d6000fd5b5094979650505050505050565b60006118a6610a3b565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a45440000000000000000000000006020820152901515611943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506116c78383613858565b60065481565b600073ffffffffffffffffffffffffffffffffffffffff82161580610a35575060005473ffffffffffffffffffffffffffffffffffffffff838116911614801590610a3557505060015473ffffffffffffffffffffffffffffffffffffffff9081169116141590565b60006119e87fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b613f83565b905090565b604080517f49535355455f524f4c45000000000000000000000000000000000000000000008152905190819003600a01902081565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60006119e87febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e613f83565b60046020526000908152604090205481565b6000806000611a9584611954565b60408051808201909152601281527f5245434f5645525f444953414c4c4f57454400000000000000000000000000006020820152901515611b32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50611b3b6111cd565b9250611b4683613f8b565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e54524143540000000000006020820152901515611be3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5073ffffffffffffffffffffffffffffffffffffffff84161515611c4e576040513031925073ffffffffffffffffffffffffffffffffffffffff84169083156108fc029084906000818181858888f19350505050158015611c48573d6000803e3d6000fd5b50611d3e565b5082611c7673ffffffffffffffffffffffffffffffffffffffff82163063ffffffff613fc516565b9150611c9f73ffffffffffffffffffffffffffffffffffffffff8216848463ffffffff6140fe16565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515611d3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b505b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b604080517f4255524e5f524f4c45000000000000000000000000000000000000000000000081529051908190036009019020611de583836139f8565b611df0338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611e8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506115988484614196565b600080611ea3610a3b565b1515611eb25760009150612020565b611eba6124ff565b905073ffffffffffffffffffffffffffffffffffffffff81161515611ee25760009150612020565b8073ffffffffffffffffffffffffffffffffffffffff1663fdef9106863087611f0a88614222565b6040517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b83811015611fa2578181015183820152602001611f8a565b50505050905090810190601f168015611fcf5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611ff157600080fd5b505af1158015612005573d6000803e3d6000fd5b505050506040513d602081101561201b57600080fd5b505191505b509392505050565b6000806120336124ff565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616024820152905173ffffffffffffffffffffffffffffffffffffffff929092169163be00bbd8916044808201926020929091908290030181600087803b15801561119b57600080fd5b604080517f41535349474e5f524f4c450000000000000000000000000000000000000000008152905190819003600b01902081565b604080517f5345545f484f4f4b5f524f4c45000000000000000000000000000000000000008152905190819003600d01902061215a8261422c565b612165338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515612202576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5060008381526005602052604080822054825482517fc2239b240000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff9182166024820152925191169263c2239b24926044808201939182900301818387803b15801561228557600080fd5b505af1158015612299573d6000803e3d6000fd5b505050600093845250506005602052506040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b604080517f4255524e5f524f4c4500000000000000000000000000000000000000000000008152905190819003600901902081565b604080517f41535349474e5f524f4c450000000000000000000000000000000000000000008152905190819003600b01902061234683836139f8565b612351338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156123ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506115988484613a1a565b60006124048461426d565b949350505050565b604080517f49535355455f524f4c45000000000000000000000000000000000000000000008152905190819003600a0190206124478261422c565b612452338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156124ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506124fa3084613c10565b505050565b60006119e87f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b613f83565b604080517f4348414e47455f434f4e54524f4c4c45525f524f4c45000000000000000000008152905190819003601601902061256582613f62565b612570338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c45440000000000000000000000000000000000602082015290151561260d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5060008054604080517f3cebb82300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291519190921692633cebb823926024808201939182900301818387803b15801561267f57600080fd5b505af1158015612693573d6000803e3d6000fd5b50505050505050565b6060806126a83361426d565b60408051808201909152601281527f544d5f43414e5f4e4f545f464f525741524400000000000000000000000000006020820152901515612745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50604080516000815260026020820181815260808301845291945090918481019080388339505060008054835193945073ffffffffffffffffffffffffffffffffffffffff1692849250811061279757fe5b73ffffffffffffffffffffffffffffffffffffffff9283166020918202909201015260018054835192169183919081106127cd57fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830290910182015260408051601f86018390048302810183019091528481526128299186908690819084018382808284378201915050505050508383614326565b5050505050565b6000805460408051808201909152601381527f544d5f43414c4c45525f4e4f545f544f4b454e0000000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff1633146128e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506124048484846149fc565b60015460408051808201909152601581527f544d5f4e4f5f575241505041424c455f544f4b454e000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff1615156129a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5060408051808201909152601681527f544d5f4d494e545f52454345495645525f49535f544d00000000000000000000602082015233301415612a48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50612a533382614196565b600154612a7d9073ffffffffffffffffffffffffffffffffffffffff16338363ffffffff6140fe16565b60408051808201909152601781527f544d5f534146455f5452414e534645525f4641494c45440000000000000000006020820152901515612b1a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612b49611a4a565b14905090565b604080517f4d494e545f524f4c4500000000000000000000000000000000000000000000008152905190819003600901902081565b60015460408051808201909152601581527f544d5f4e4f5f575241505041424c455f544f4b454e000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff161515612c3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5060408051808201909152601681527f544d5f4d494e545f52454345495645525f49535f544d00000000000000000000602082015233301415612cd9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50600154612d059073ffffffffffffffffffffffffffffffffffffffff1633308463ffffffff614b0616565b60408051808201909152601781527f544d5f534146455f5452414e534645525f4641494c45440000000000000000006020820152901515612da2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50612dad3382613c10565b50565b60025481565b604080517f5245564f4b455f56455354494e47535f524f4c450000000000000000000000008152905190819003601401902081565b612df3611a4a565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015612e8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50612e98614ba7565b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663f77c47916040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612f1357600080fd5b505af1158015612f27573d6000803e3d6000fd5b505050506040513d6020811015612f3d57600080fd5b505160408051808201909152601381527f544d5f544f4b454e5f434f4e54524f4c4c45520000000000000000000000000060208201529173ffffffffffffffffffffffffffffffffffffffff90911614612ff3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506000805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600180549286169290911691909117905580156130555780613077565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6002819055508115156000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bef97c876040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561310557600080fd5b505af1158015613119573d6000803e3d6000fd5b505050506040513d602081101561312f57600080fd5b50511515146131c05760008054604080517ff41e60c50000000000000000000000000000000000000000000000000000000081528515156004820152905173ffffffffffffffffffffffffffffffffffffffff9092169263f41e60c59260248084019382900301818387803b1580156131a757600080fd5b505af11580156131bb573d6000803e3d6000fd5b505050505b6040805173ffffffffffffffffffffffffffffffffffffffff80871682528516602082015281517f5844a58b3fee979aa5196b369b2eb44f59f5a61b1f83af3a55b62b13b903a001929181900390910190a150505050565b6000805460408051808201909152601381527f544d5f43414c4c45525f4e4f545f544f4b454e0000000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff1633146132cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50600092915050565b604080517f5345545f484f4f4b5f524f4c45000000000000000000000000000000000000008152905190819003600d01902081565b604080517f5245564f4b455f56455354494e47535f524f4c4500000000000000000000000081529051908190036014019020600090819061334d85613f62565b613358338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156133f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5073ffffffffffffffffffffffffffffffffffffffff8616600090815260046020908152604091829020548251808401909352600d83527f544d5f4e4f5f56455354494e4700000000000000000000000000000000000000918301919091528791879182106134c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5073ffffffffffffffffffffffffffffffffffffffff881660009081526003602090815260408083208a845282529182902060018101548351808501909452601884527f544d5f56455354494e475f4e4f545f5245564f4b41424c4500000000000000009284019290925297507801000000000000000000000000000000000000000000000000900460ff1615156135b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5085546135ff906135c3613854565b600189015467ffffffffffffffff8082169168010000000000000000810482169170010000000000000000000000000000000090910416614c86565b73ffffffffffffffffffffffffffffffffffffffff808a1660008181526003602090815260408083208d8452825280832083815560010180547fffffffffffffff00000000000000000000000000000000000000000000000000169055825481517f23b872dd0000000000000000000000000000000000000000000000000000000081526004810195909552306024860152604485018790529051959a50909316936323b872dd936064808501949193918390030190829087803b1580156136c657600080fd5b505af11580156136da573d6000803e3d6000fd5b505050506040513d60208110156136f057600080fd5b50516040805180820190915260208082527f544d5f5245564f4b455f5452414e534645525f46524f4d5f52455645525445449082015290151561378f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506040805188815260208101879052815173ffffffffffffffffffffffffffffffffffffffff8b16927fafc516b1509f836efdc27d64d966d14f82ef53f456f0de74c12ac8a651a084cc928290030190a25050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b4390565b4290565b60008054604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015291518493849384938493849392909216916370a082319160248082019260209290919082900301818787803b1580156138d857600080fd5b505af11580156138ec573d6000803e3d6000fd5b505050506040513d602081101561390257600080fd5b5051945073ffffffffffffffffffffffffffffffffffffffff881630146139ec5773ffffffffffffffffffffffffffffffffffffffff8816600090815260046020526040812054945092505b838310156139ec5773ffffffffffffffffffffffffffffffffffffffff881660009081526003602090815260408083208684529091529020805460018201549193506139cd91899067ffffffffffffffff8082169168010000000000000000810482169170010000000000000000000000000000000090910416614c86565b90506139df858263ffffffff614d0016565b945060019092019161394e565b50929695505050505050565b60606116c78373ffffffffffffffffffffffffffffffffffffffff1683614db2565b613a248282613d6e565b60408051808201909152601a81527f544d5f42414c414e43455f494e435f4e4f545f414c4c4f5745440000000000006020820152901515613ac1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5060008054604080517f23b872dd00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff868116602483015260448201869052915191909216926323b872dd92606480820193602093909283900390910190829087803b158015613b4757600080fd5b505af1158015613b5b573d6000803e3d6000fd5b505050506040513d6020811015613b7157600080fd5b50516040805180820190915260208082527f544d5f41535349474e5f5452414e534645525f46524f4d5f5245564552544544908201529015156124fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b613c1a8282613d6e565b60408051808201909152601a81527f544d5f42414c414e43455f494e435f4e4f545f414c4c4f5745440000000000006020820152901515613cb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50613cc460008383613e58565b5060008054604080517f827f32c000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529151919092169263827f32c092604480820193602093909283900390910190829087803b158015613d4457600080fd5b505af1158015613d58573d6000803e3d6000fd5b505050506040513d602081101561159857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff8316301415613d9657506001610a35565b60025460008054604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301529151613e4f94889493909316926370a0823192602480820193602093909283900390910190829087803b158015613e1757600080fd5b505af1158015613e2b573d6000803e3d6000fd5b505050506040513d6020811015613e4157600080fd5b50519063ffffffff614e0d16565b11159392505050565b600160005b818015613e6b575060065481105b156120205760008181526005602052604090205473ffffffffffffffffffffffffffffffffffffffff1615613f5a5760008181526005602090815260408083205481517f4a39314900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015289811660248301526044820189905292519290911693634a3931499360648084019491939192918390030190829087803b158015613f2b57600080fd5b505af1158015613f3f573d6000803e3d6000fd5b505050506040513d6020811015613f5557600080fd5b505191505b600101613e5d565b6060610a358273ffffffffffffffffffffffffffffffffffffffff1661422c565b5490565b5490565b60008073ffffffffffffffffffffffffffffffffffffffff83161515613fb45760009150613fbf565b823b90506000811191505b50919050565b6040805173ffffffffffffffffffffffffffffffffffffffff83166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a082310000000000000000000000000000000000000000000000000000000017905260009081806140528684614eb2565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f524556455254454400000000602082015291935091508215156140f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905260009061418d8582614ee3565b95945050505050565b6141a282600083613e58565b5060008054604080517fd3ce77fe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529151919092169263d3ce77fe92604480820193602093909283900390910190829087803b158015613d4457600080fd5b8051602002815290565b604080516001808252818301909252606091602080830190803883390190505090508181600081518110151561425e57fe5b60209081029091010152919050565b6000614277610a3b565b8015610a35575060008054604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152915191909216916370a0823191602480830192602092919082900301818787803b1580156142f357600080fd5b505af1158015614307573d6000803e3d6000fd5b505050506040513d602081101561431d57600080fd5b50511192915050565b6060600080606080614336610a3b565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a454400000000000000000000000060208201529015156143d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506000806143df6124ff565b91506143e96119bd565b90506143f48a6110c1565b60408051808201909152601b81527f45564d52554e5f4558454355544f525f554e415641494c41424c450000000000602082015290965073ffffffffffffffffffffffffffffffffffffffff871615156144aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506040516060602482019081528b5160848301528b517f279cea3500000000000000000000000000000000000000000000000000000000975087928d928d928d9282916044820191606481019160a490910190602089019080838360005b83811015614520578181015183820152602001614508565b50505050905090810190601f16801561454d5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015614580578181015183820152602001614568565b50505050905090810190601f1680156145ad5780820380516001836020036101000a031916815260200191505b508481038252855181528551602091820191808801910280838360005b838110156145e25781810151838201526020016145ca565b505050509050019650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509350600080855160208701895af460405193508080156146e757603f3d1180156146855760203d03806020883e86016040526146e1565b7f08c379a000000000000000000000000000000000000000000000000000000000865260206004870152601e60248701527f45564d52554e5f4558454355544f525f494e56414c49445f52455455524e00006044870152606486fd5b506146f0565b3d6000863e3d85fd5b50508573ffffffffffffffffffffffffffffffffffffffff167f5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad98b8b8660405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561477257818101518382015260200161475a565b50505050905090810190601f16801561479f5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156147d25781810151838201526020016147ba565b50505050905090810190601f1680156147ff5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561483257818101518382015260200161481a565b50505050905090810190601f16801561485f5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a28296508173ffffffffffffffffffffffffffffffffffffffff166148926124ff565b73ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400815250901515614948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50806149526119bd565b60408051808201909152601f81527f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400602082015291146149ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b505050505050509392505050565b600160005b818015614a0f575060065481105b156120205760008181526005602052604090205473ffffffffffffffffffffffffffffffffffffffff1615614afe5760008181526005602090815260408083205481517fda682aeb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301528981166024830152604482018990529251929091169363da682aeb9360648084019491939192918390030190829087803b158015614acf57600080fd5b505af1158015614ae3573d6000803e3d6000fd5b505050506040513d6020811015614af957600080fd5b505191505b600101614a01565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052600090614b9d8682614ee3565b9695505050505050565b614baf611a4a565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015614c4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50614c84614c57613850565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff614f3116565b565b600080828610614c9957600091506140f4565b83861015614ca9578691506140f4565b614cb9838663ffffffff614d0016565b614cd9614ccc888863ffffffff614d0016565b899063ffffffff614f3516565b811515614ce257fe5b049050614cf5878263ffffffff614d0016565b979650505050505050565b60408051808201909152601281527f4d4154485f5355425f554e444552464c4f5700000000000000000000000000006020820152600090819084841115614da3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b505050808203805b5092915050565b604080516002808252606080830184529260208301908038833901905050905082816000815181101515614de257fe5b602090810290910101528051829082906001908110614dfd57fe5b6020908102909101015292915050565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f5700000000000000000000000000000060208201526000908383019084821015612020576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b6000806000806040516020818751602089018a5afa92506000831115614ed757805191505b50909590945092505050565b6000806040516020818551602087016000895af16000811115614f27573d8015614f145760208114614f1d57614f25565b60019350614f25565b600183511493505b505b5090949350505050565b9055565b600080831515614f485760009150614dab565b50828202828482811515614f5857fe5b60408051808201909152601181527f4d4154485f4d554c5f4f564552464c4f5700000000000000000000000000000060208201529291900414612020576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af95600a165627a7a723058206758ed1f40e7606a234de7a9ea8f8001848987b858d77ae0f37f6502fa596c180029ebb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e",
  "deployedBytecode": "0x6080604052600436106102455763ffffffff7c010000000000000000000000000000000000000000000000000000000060003504166301ffc9a7811461024a5780630803fac0146102985780630db3971b146102ad5780630f8f8b83146102d45780631dfab0351461030257806321cb18cd146103405780632914b9bd1461038f57806332f0a3b5146103e85780633e05a36d146103fd57806340c10f19146104675780634a191c0d1461049a5780634a393149146104af57806357d0c179146104e65780636354b6611461051f57806372f8393c1461054d57806374c46e431461057e5780637e7db6e11461059357806380afdea8146105c1578063856222f1146105d6578063864c17d7146105eb5780638b3dd7491461060357806397f2562a146106185780639d4941d8146106465780639dc29fac14610674578063a1658fad146106a5578063a479e50814610719578063a51d9a8e1461072e578063b80fc15a14610743578063b930908f1461075b578063be76048814610770578063c0774df3146107a1578063cc872b66146107db578063d4aae0c4146107f3578063d6c8976b14610808578063d948d46814610836578063da682aeb14610856578063de0e9a3e1461088d578063de4796ed146108a5578063e9a9c850146108ba578063ea598cb0146108cf578063ecfda432146108e7578063edc168f1146108fc578063effb952314610911578063f48c30541461094d578063f68e73041461096e578063fa6799f214610983578063fc0c546a146109b4578063fd64eccb146109c9575b600080fd5b34801561025657600080fd5b506102847fffffffff00000000000000000000000000000000000000000000000000000000600435166109de565b604080519115158252519081900360200190f35b3480156102a457600080fd5b50610284610a3b565b3480156102b957600080fd5b506102c2610a64565b60408051918252519081900360200190f35b3480156102e057600080fd5b506102c273ffffffffffffffffffffffffffffffffffffffff60043516610a69565b34801561030e57600080fd5b50610317610b5e565b6040805173ffffffffffffffffffffffffffffffffffffffff9092168252519081900360200190f35b34801561034c57600080fd5b506102c273ffffffffffffffffffffffffffffffffffffffff6004351660243567ffffffffffffffff6044358116906064358116906084351660a4351515610b7a565b34801561039b57600080fd5b506040805160206004803580820135601f81018490048402850184019095528484526103179436949293602493928401919081908401838280828437509497506110c19650505050505050565b3480156103f457600080fd5b506103176111cd565b34801561040957600080fd5b5061042e73ffffffffffffffffffffffffffffffffffffffff6004351660243561126b565b6040805195865267ffffffffffffffff948516602087015292841685840152921660608401529015156080830152519081900360a00190f35b34801561047357600080fd5b5061049873ffffffffffffffffffffffffffffffffffffffff600435166024356113f4565b005b3480156104a657600080fd5b506102c261159e565b3480156104bb57600080fd5b5061028473ffffffffffffffffffffffffffffffffffffffff600435811690602435166044356115d3565b3480156104f257600080fd5b506104fb6116ce565b6040518082600281111561050b57fe5b60ff16815260200191505060405180910390f35b34801561052b57600080fd5b506102c273ffffffffffffffffffffffffffffffffffffffff600435166116d3565b34801561055957600080fd5b506102c273ffffffffffffffffffffffffffffffffffffffff6004351660243561189c565b34801561058a57600080fd5b506102c261194e565b34801561059f57600080fd5b5061028473ffffffffffffffffffffffffffffffffffffffff60043516611954565b3480156105cd57600080fd5b506102c26119bd565b3480156105e257600080fd5b506102c26119ed565b3480156105f757600080fd5b50610317600435611a22565b34801561060f57600080fd5b506102c2611a4a565b34801561062457600080fd5b506102c273ffffffffffffffffffffffffffffffffffffffff60043516611a75565b34801561065257600080fd5b5061049873ffffffffffffffffffffffffffffffffffffffff60043516611a87565b34801561068057600080fd5b5061049873ffffffffffffffffffffffffffffffffffffffff60043516602435611da9565b3480156106b157600080fd5b50604080516020600460443581810135838102808601850190965280855261028495833573ffffffffffffffffffffffffffffffffffffffff16956024803596369695606495939492019291829185019084908082843750949750611e989650505050505050565b34801561072557600080fd5b50610317612028565b34801561073a57600080fd5b506102c26120ea565b34801561074f57600080fd5b5061049860043561211f565b34801561076757600080fd5b506102c26122d5565b34801561077c57600080fd5b5061049873ffffffffffffffffffffffffffffffffffffffff6004351660243561230a565b3480156107ad57600080fd5b506102846004803573ffffffffffffffffffffffffffffffffffffffff1690602480359081019101356123f9565b3480156107e757600080fd5b5061049860043561240c565b3480156107ff57600080fd5b506103176124ff565b34801561081457600080fd5b5061049873ffffffffffffffffffffffffffffffffffffffff6004351661252a565b34801561084257600080fd5b50610498600480356024810191013561269c565b34801561086257600080fd5b5061028473ffffffffffffffffffffffffffffffffffffffff60043581169060243516604435612830565b34801561089957600080fd5b506104986004356128f3565b3480156108b157600080fd5b50610284612b1e565b3480156108c657600080fd5b506102c2612b4f565b3480156108db57600080fd5b50610498600435612b84565b3480156108f357600080fd5b506102c2612db0565b34801561090857600080fd5b506102c2612db6565b34801561091d57600080fd5b5061049873ffffffffffffffffffffffffffffffffffffffff600435811690602435166044351515606435612deb565b61028473ffffffffffffffffffffffffffffffffffffffff60043516613218565b34801561097a57600080fd5b506102c26132d8565b34801561098f57600080fd5b5061049873ffffffffffffffffffffffffffffffffffffffff6004351660243561330d565b3480156109c057600080fd5b506103176137ea565b3480156109d557600080fd5b506102846116ce565b60006109e982613806565b80610a3557507fffffffff0000000000000000000000000000000000000000000000000000000082167f54053e6c00000000000000000000000000000000000000000000000000000000145b92915050565b600080610a46611a4a565b90508015801590610a5e575080610a5b613850565b10155b91505090565b603281565b6000610a73610a3b565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a45440000000000000000000000006020820152901515610b4c576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004018080602001828103825283818151815260200191508051906020019080838360005b83811015610b11578181015183820152602001610af9565b50505050905090810190601f168015610b3e5780820380516001836020036101000a031916815260200191505b509250505060405180910390fd5b50610a3582610b59613854565b613858565b60015473ffffffffffffffffffffffffffffffffffffffff1681565b604080517f41535349474e5f524f4c450000000000000000000000000000000000000000008152905190819003600b0190206000908190610bbb89896139f8565b610bc6338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515610c63576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5060408051808201909152601081527f544d5f56455354494e475f544f5f544d00000000000000000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff8b16301415610d18576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5073ffffffffffffffffffffffffffffffffffffffff8a16600090815260046020908152604091829020548251808401909352601483527f544d5f544f4f5f4d414e595f56455354494e475300000000000000000000000091830191909152603211610de0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b508667ffffffffffffffff168867ffffffffffffffff1611158015610e1957508567ffffffffffffffff168767ffffffffffffffff1611155b60408051808201909152601381527f544d5f57524f4e475f434c4946465f44415445000000000000000000000000006020820152901515610eb6576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50600460008b73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff168152602001908152602001600020600081548092919060010191905055925060a0604051908101604052808a81526020018967ffffffffffffffff1681526020018867ffffffffffffffff1681526020018767ffffffffffffffff168152602001861515815250600360008c73ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815260200190815260200160002060008581526020019081526020016000206000820151816000015560208201518160010160006101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060408201518160010160086101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060608201518160010160106101000a81548167ffffffffffffffff021916908367ffffffffffffffff16021790555060808201518160010160186101000a81548160ff0219169083151502179055509050506110638a8a613a1a565b60408051848152602081018b9052815173ffffffffffffffffffffffffffffffffffffffff8d16927f627ad26dcfe82ec79b33fda0ddd062f6fab9f4914acac8345f79090dfd86fb54928290030190a2509098975050505050505050565b60006110cb612028565b73ffffffffffffffffffffffffffffffffffffffff166304bf2a7f836040518263ffffffff167c01000000000000000000000000000000000000000000000000000000000281526004018080602001828103825283818151815260200191508051906020019080838360005b8381101561114f578181015183820152602001611137565b50505050905090810190601f16801561117c5780820380516001836020036101000a031916815260200191505b5092505050602060405180830381600087803b15801561119b57600080fd5b505af11580156111af573d6000803e3d6000fd5b505050506040513d60208110156111c557600080fd5b505192915050565b60006111d76124ff565b73ffffffffffffffffffffffffffffffffffffffff166332f0a3b56040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561123a57600080fd5b505af115801561124e573d6000803e3d6000fd5b505050506040513d602081101561126457600080fd5b5051905090565b6000806000806000808787600460008373ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1681526020019081526020016000205481106040805190810160405280600d81526020017f544d5f4e4f5f56455354494e4700000000000000000000000000000000000000815250901515611357576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5050505073ffffffffffffffffffffffffffffffffffffffff969096166000908152600360209081526040808320978352969052949094208054600190910154909667ffffffffffffffff8083169750680100000000000000008304811696507001000000000000000000000000000000008304169450780100000000000000000000000000000000000000000000000090910460ff1692509050565b604080517f4d494e545f524f4c4500000000000000000000000000000000000000000000008152905190819003600901902061143083836139f8565b61143b338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156114d8576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5060408051808201909152601681527f544d5f4d494e545f52454345495645525f49535f544d00000000000000000000602082015273ffffffffffffffffffffffffffffffffffffffff851630141561158d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506115988484613c10565b50505050565b604080517f4348414e47455f434f4e54524f4c4c45525f524f4c45000000000000000000008152905190819003601601902081565b6000805460408051808201909152601381527f544d5f43414c4c45525f4e4f545f544f4b454e0000000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff16331461168a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506116958383613d6e565b80156116ac5750816116a985610b59613854565b10155b156116c3576116bc848484613e58565b90506116c7565b5060005b9392505050565b600190565b604080517f5345545f484f4f4b5f524f4c45000000000000000000000000000000000000008152905190819003600d019020600090819061171384613f62565b61171e338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156117bb576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50600680546001810190915560008181526005602052604080822080547fffffffffffffffffffffffff00000000000000000000000000000000000000001673ffffffffffffffffffffffffffffffffffffffff8a81169190911791829055835483517f4d4eb6ce00000000000000000000000000000000000000000000000000000000815260048101879052908216602482015292519497501692634d4eb6ce9260448084019391929182900301818387803b15801561187b57600080fd5b505af115801561188f573d6000803e3d6000fd5b5094979650505050505050565b60006118a6610a3b565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a45440000000000000000000000006020820152901515611943576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506116c78383613858565b60065481565b600073ffffffffffffffffffffffffffffffffffffffff82161580610a35575060005473ffffffffffffffffffffffffffffffffffffffff838116911614801590610a3557505060015473ffffffffffffffffffffffffffffffffffffffff9081169116141590565b60006119e87fd625496217aa6a3453eecb9c3489dc5a53e6c67b444329ea2b2cbc9ff547639b613f83565b905090565b604080517f49535355455f524f4c45000000000000000000000000000000000000000000008152905190819003600a01902081565b60056020526000908152604090205473ffffffffffffffffffffffffffffffffffffffff1681565b60006119e87febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e613f83565b60046020526000908152604090205481565b6000806000611a9584611954565b60408051808201909152601281527f5245434f5645525f444953414c4c4f57454400000000000000000000000000006020820152901515611b32576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50611b3b6111cd565b9250611b4683613f8b565b60408051808201909152601a81527f5245434f5645525f5641554c545f4e4f545f434f4e54524143540000000000006020820152901515611be3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5073ffffffffffffffffffffffffffffffffffffffff84161515611c4e576040513031925073ffffffffffffffffffffffffffffffffffffffff84169083156108fc029084906000818181858888f19350505050158015611c48573d6000803e3d6000fd5b50611d3e565b5082611c7673ffffffffffffffffffffffffffffffffffffffff82163063ffffffff613fc516565b9150611c9f73ffffffffffffffffffffffffffffffffffffffff8216848463ffffffff6140fe16565b60408051808201909152601d81527f5245434f5645525f544f4b454e5f5452414e534645525f4641494c45440000006020820152901515611d3c576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b505b8373ffffffffffffffffffffffffffffffffffffffff168373ffffffffffffffffffffffffffffffffffffffff167f596caf56044b55fb8c4ca640089bbc2b63cae3e978b851f5745cbb7c5b288e02846040518082815260200191505060405180910390a350505050565b604080517f4255524e5f524f4c45000000000000000000000000000000000000000000000081529051908190036009019020611de583836139f8565b611df0338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515611e8d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506115988484614196565b600080611ea3610a3b565b1515611eb25760009150612020565b611eba6124ff565b905073ffffffffffffffffffffffffffffffffffffffff81161515611ee25760009150612020565b8073ffffffffffffffffffffffffffffffffffffffff1663fdef9106863087611f0a88614222565b6040517c010000000000000000000000000000000000000000000000000000000063ffffffff871602815273ffffffffffffffffffffffffffffffffffffffff808616600483019081529085166024830152604482018490526080606483019081528351608484015283519192909160a490910190602085019080838360005b83811015611fa2578181015183820152602001611f8a565b50505050905090810190601f168015611fcf5780820380516001836020036101000a031916815260200191505b5095505050505050602060405180830381600087803b158015611ff157600080fd5b505af1158015612005573d6000803e3d6000fd5b505050506040513d602081101561201b57600080fd5b505191505b509392505050565b6000806120336124ff565b604080517fbe00bbd80000000000000000000000000000000000000000000000000000000081527fd6f028ca0e8edb4a8c9757ca4fdccab25fa1e0317da1188108f7d2dee14902fb60048201527fddbcfd564f642ab5627cf68b9b7d374fb4f8a36e941a75d89c87998cef03bd616024820152905173ffffffffffffffffffffffffffffffffffffffff929092169163be00bbd8916044808201926020929091908290030181600087803b15801561119b57600080fd5b604080517f41535349474e5f524f4c450000000000000000000000000000000000000000008152905190819003600b01902081565b604080517f5345545f484f4f4b5f524f4c45000000000000000000000000000000000000008152905190819003600d01902061215a8261422c565b612165338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c454400000000000000000000000000000000006020820152901515612202576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5060008381526005602052604080822054825482517fc2239b240000000000000000000000000000000000000000000000000000000081526004810188905273ffffffffffffffffffffffffffffffffffffffff9182166024820152925191169263c2239b24926044808201939182900301818387803b15801561228557600080fd5b505af1158015612299573d6000803e3d6000fd5b505050600093845250506005602052506040902080547fffffffffffffffffffffffff0000000000000000000000000000000000000000169055565b604080517f4255524e5f524f4c4500000000000000000000000000000000000000000000008152905190819003600901902081565b604080517f41535349474e5f524f4c450000000000000000000000000000000000000000008152905190819003600b01902061234683836139f8565b612351338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156123ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506115988484613a1a565b60006124048461426d565b949350505050565b604080517f49535355455f524f4c45000000000000000000000000000000000000000000008152905190819003600a0190206124478261422c565b612452338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156124ef576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506124fa3084613c10565b505050565b60006119e87f4172f0f7d2289153072b0a6ca36959e0cbe2efc3afe50fc81636caa96338137b613f83565b604080517f4348414e47455f434f4e54524f4c4c45525f524f4c45000000000000000000008152905190819003601601902061256582613f62565b612570338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c45440000000000000000000000000000000000602082015290151561260d576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5060008054604080517f3cebb82300000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff878116600483015291519190921692633cebb823926024808201939182900301818387803b15801561267f57600080fd5b505af1158015612693573d6000803e3d6000fd5b50505050505050565b6060806126a83361426d565b60408051808201909152601281527f544d5f43414e5f4e4f545f464f525741524400000000000000000000000000006020820152901515612745576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50604080516000815260026020820181815260808301845291945090918481019080388339505060008054835193945073ffffffffffffffffffffffffffffffffffffffff1692849250811061279757fe5b73ffffffffffffffffffffffffffffffffffffffff9283166020918202909201015260018054835192169183919081106127cd57fe5b73ffffffffffffffffffffffffffffffffffffffff909216602092830290910182015260408051601f86018390048302810183019091528481526128299186908690819084018382808284378201915050505050508383614326565b5050505050565b6000805460408051808201909152601381527f544d5f43414c4c45525f4e4f545f544f4b454e0000000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff1633146128e7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506124048484846149fc565b60015460408051808201909152601581527f544d5f4e4f5f575241505041424c455f544f4b454e000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff1615156129a9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5060408051808201909152601681527f544d5f4d494e545f52454345495645525f49535f544d00000000000000000000602082015233301415612a48576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50612a533382614196565b600154612a7d9073ffffffffffffffffffffffffffffffffffffffff16338363ffffffff6140fe16565b60408051808201909152601781527f544d5f534146455f5452414e534645525f4641494c45440000000000000000006020820152901515612b1a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5050565b60007fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff612b49611a4a565b14905090565b604080517f4d494e545f524f4c4500000000000000000000000000000000000000000000008152905190819003600901902081565b60015460408051808201909152601581527f544d5f4e4f5f575241505041424c455f544f4b454e000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff161515612c3a576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5060408051808201909152601681527f544d5f4d494e545f52454345495645525f49535f544d00000000000000000000602082015233301415612cd9576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50600154612d059073ffffffffffffffffffffffffffffffffffffffff1633308463ffffffff614b0616565b60408051808201909152601781527f544d5f534146455f5452414e534645525f4641494c45440000000000000000006020820152901515612da2576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50612dad3382613c10565b50565b60025481565b604080517f5245564f4b455f56455354494e47535f524f4c450000000000000000000000008152905190819003601401902081565b612df3611a4a565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015612e8f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50612e98614ba7565b3073ffffffffffffffffffffffffffffffffffffffff168473ffffffffffffffffffffffffffffffffffffffff1663f77c47916040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b158015612f1357600080fd5b505af1158015612f27573d6000803e3d6000fd5b505050506040513d6020811015612f3d57600080fd5b505160408051808201909152601381527f544d5f544f4b454e5f434f4e54524f4c4c45520000000000000000000000000060208201529173ffffffffffffffffffffffffffffffffffffffff90911614612ff3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506000805473ffffffffffffffffffffffffffffffffffffffff8087167fffffffffffffffffffffffff000000000000000000000000000000000000000092831617909255600180549286169290911691909117905580156130555780613077565b7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff5b6002819055508115156000809054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1663bef97c876040518163ffffffff167c0100000000000000000000000000000000000000000000000000000000028152600401602060405180830381600087803b15801561310557600080fd5b505af1158015613119573d6000803e3d6000fd5b505050506040513d602081101561312f57600080fd5b50511515146131c05760008054604080517ff41e60c50000000000000000000000000000000000000000000000000000000081528515156004820152905173ffffffffffffffffffffffffffffffffffffffff9092169263f41e60c59260248084019382900301818387803b1580156131a757600080fd5b505af11580156131bb573d6000803e3d6000fd5b505050505b6040805173ffffffffffffffffffffffffffffffffffffffff80871682528516602082015281517f5844a58b3fee979aa5196b369b2eb44f59f5a61b1f83af3a55b62b13b903a001929181900390910190a150505050565b6000805460408051808201909152601381527f544d5f43414c4c45525f4e4f545f544f4b454e0000000000000000000000000060208201529073ffffffffffffffffffffffffffffffffffffffff1633146132cf576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50600092915050565b604080517f5345545f484f4f4b5f524f4c45000000000000000000000000000000000000008152905190819003600d01902081565b604080517f5245564f4b455f56455354494e47535f524f4c4500000000000000000000000081529051908190036014019020600090819061334d85613f62565b613358338383611e98565b60408051808201909152600f81527f4150505f415554485f4641494c4544000000000000000000000000000000000060208201529015156133f5576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5073ffffffffffffffffffffffffffffffffffffffff8616600090815260046020908152604091829020548251808401909352600d83527f544d5f4e4f5f56455354494e4700000000000000000000000000000000000000918301919091528791879182106134c0576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5073ffffffffffffffffffffffffffffffffffffffff881660009081526003602090815260408083208a845282529182902060018101548351808501909452601884527f544d5f56455354494e475f4e4f545f5245564f4b41424c4500000000000000009284019290925297507801000000000000000000000000000000000000000000000000900460ff1615156135b4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5085546135ff906135c3613854565b600189015467ffffffffffffffff8082169168010000000000000000810482169170010000000000000000000000000000000090910416614c86565b73ffffffffffffffffffffffffffffffffffffffff808a1660008181526003602090815260408083208d8452825280832083815560010180547fffffffffffffff00000000000000000000000000000000000000000000000000169055825481517f23b872dd0000000000000000000000000000000000000000000000000000000081526004810195909552306024860152604485018790529051959a50909316936323b872dd936064808501949193918390030190829087803b1580156136c657600080fd5b505af11580156136da573d6000803e3d6000fd5b505050506040513d60208110156136f057600080fd5b50516040805180820190915260208082527f544d5f5245564f4b455f5452414e534645525f46524f4d5f52455645525445449082015290151561378f576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506040805188815260208101879052815173ffffffffffffffffffffffffffffffffffffffff8b16927fafc516b1509f836efdc27d64d966d14f82ef53f456f0de74c12ac8a651a084cc928290030190a25050505050505050565b60005473ffffffffffffffffffffffffffffffffffffffff1681565b7fffffffff0000000000000000000000000000000000000000000000000000000081167f01ffc9a70000000000000000000000000000000000000000000000000000000014919050565b4390565b4290565b60008054604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff868116600483015291518493849384938493849392909216916370a082319160248082019260209290919082900301818787803b1580156138d857600080fd5b505af11580156138ec573d6000803e3d6000fd5b505050506040513d602081101561390257600080fd5b5051945073ffffffffffffffffffffffffffffffffffffffff881630146139ec5773ffffffffffffffffffffffffffffffffffffffff8816600090815260046020526040812054945092505b838310156139ec5773ffffffffffffffffffffffffffffffffffffffff881660009081526003602090815260408083208684529091529020805460018201549193506139cd91899067ffffffffffffffff8082169168010000000000000000810482169170010000000000000000000000000000000090910416614c86565b90506139df858263ffffffff614d0016565b945060019092019161394e565b50929695505050505050565b60606116c78373ffffffffffffffffffffffffffffffffffffffff1683614db2565b613a248282613d6e565b60408051808201909152601a81527f544d5f42414c414e43455f494e435f4e4f545f414c4c4f5745440000000000006020820152901515613ac1576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5060008054604080517f23b872dd00000000000000000000000000000000000000000000000000000000815230600482015273ffffffffffffffffffffffffffffffffffffffff868116602483015260448201869052915191909216926323b872dd92606480820193602093909283900390910190829087803b158015613b4757600080fd5b505af1158015613b5b573d6000803e3d6000fd5b505050506040513d6020811015613b7157600080fd5b50516040805180820190915260208082527f544d5f41535349474e5f5452414e534645525f46524f4d5f5245564552544544908201529015156124fa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b613c1a8282613d6e565b60408051808201909152601a81527f544d5f42414c414e43455f494e435f4e4f545f414c4c4f5745440000000000006020820152901515613cb7576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50613cc460008383613e58565b5060008054604080517f827f32c000000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529151919092169263827f32c092604480820193602093909283900390910190829087803b158015613d4457600080fd5b505af1158015613d58573d6000803e3d6000fd5b505050506040513d602081101561159857600080fd5b600073ffffffffffffffffffffffffffffffffffffffff8316301415613d9657506001610a35565b60025460008054604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff88811660048301529151613e4f94889493909316926370a0823192602480820193602093909283900390910190829087803b158015613e1757600080fd5b505af1158015613e2b573d6000803e3d6000fd5b505050506040513d6020811015613e4157600080fd5b50519063ffffffff614e0d16565b11159392505050565b600160005b818015613e6b575060065481105b156120205760008181526005602052604090205473ffffffffffffffffffffffffffffffffffffffff1615613f5a5760008181526005602090815260408083205481517f4a39314900000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a8116600483015289811660248301526044820189905292519290911693634a3931499360648084019491939192918390030190829087803b158015613f2b57600080fd5b505af1158015613f3f573d6000803e3d6000fd5b505050506040513d6020811015613f5557600080fd5b505191505b600101613e5d565b6060610a358273ffffffffffffffffffffffffffffffffffffffff1661422c565b5490565b5490565b60008073ffffffffffffffffffffffffffffffffffffffff83161515613fb45760009150613fbf565b823b90506000811191505b50919050565b6040805173ffffffffffffffffffffffffffffffffffffffff83166024808301919091528251808303909101815260449091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f70a082310000000000000000000000000000000000000000000000000000000017905260009081806140528684614eb2565b60408051808201909152601c81527f534146455f4552435f32305f42414c414e43455f524556455254454400000000602082015291935091508215156140f4576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b5095945050505050565b6040805173ffffffffffffffffffffffffffffffffffffffff8416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167fa9059cbb0000000000000000000000000000000000000000000000000000000017905260009061418d8582614ee3565b95945050505050565b6141a282600083613e58565b5060008054604080517fd3ce77fe00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152602482018690529151919092169263d3ce77fe92604480820193602093909283900390910190829087803b158015613d4457600080fd5b8051602002815290565b604080516001808252818301909252606091602080830190803883390190505090508181600081518110151561425e57fe5b60209081029091010152919050565b6000614277610a3b565b8015610a35575060008054604080517f70a0823100000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8681166004830152915191909216916370a0823191602480830192602092919082900301818787803b1580156142f357600080fd5b505af1158015614307573d6000803e3d6000fd5b505050506040513d602081101561431d57600080fd5b50511192915050565b6060600080606080614336610a3b565b60408051808201909152601481527f494e49545f4e4f545f494e495449414c495a454400000000000000000000000060208201529015156143d3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506000806143df6124ff565b91506143e96119bd565b90506143f48a6110c1565b60408051808201909152601b81527f45564d52554e5f4558454355544f525f554e415641494c41424c450000000000602082015290965073ffffffffffffffffffffffffffffffffffffffff871615156144aa576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b506040516060602482019081528b5160848301528b517f279cea3500000000000000000000000000000000000000000000000000000000975087928d928d928d9282916044820191606481019160a490910190602089019080838360005b83811015614520578181015183820152602001614508565b50505050905090810190601f16801561454d5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b83811015614580578181015183820152602001614568565b50505050905090810190601f1680156145ad5780820380516001836020036101000a031916815260200191505b508481038252855181528551602091820191808801910280838360005b838110156145e25781810151838201526020016145ca565b505050509050019650505050505050604051602081830303815290604052907bffffffffffffffffffffffffffffffffffffffffffffffffffffffff19166020820180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff83818316178352505050509350600080855160208701895af460405193508080156146e757603f3d1180156146855760203d03806020883e86016040526146e1565b7f08c379a000000000000000000000000000000000000000000000000000000000865260206004870152601e60248701527f45564d52554e5f4558454355544f525f494e56414c49445f52455455524e00006044870152606486fd5b506146f0565b3d6000863e3d85fd5b50508573ffffffffffffffffffffffffffffffffffffffff167f5229a5dba83a54ae8cb5b51bdd6de9474cacbe9dd332f5185f3a4f4f2e3f4ad98b8b8660405180806020018060200180602001848103845287818151815260200191508051906020019080838360005b8381101561477257818101518382015260200161475a565b50505050905090810190601f16801561479f5780820380516001836020036101000a031916815260200191505b50848103835286518152865160209182019188019080838360005b838110156147d25781810151838201526020016147ba565b50505050905090810190601f1680156147ff5780820380516001836020036101000a031916815260200191505b50848103825285518152855160209182019187019080838360005b8381101561483257818101518382015260200161481a565b50505050905090810190601f16801561485f5780820380516001836020036101000a031916815260200191505b50965050505050505060405180910390a28296508173ffffffffffffffffffffffffffffffffffffffff166148926124ff565b73ffffffffffffffffffffffffffffffffffffffff16146040805190810160405280601f81526020017f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400815250901515614948576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50806149526119bd565b60408051808201909152601f81527f45564d52554e5f50524f5445435445445f53544154455f4d4f44494649454400602082015291146149ee576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b505050505050509392505050565b600160005b818015614a0f575060065481105b156120205760008181526005602052604090205473ffffffffffffffffffffffffffffffffffffffff1615614afe5760008181526005602090815260408083205481517fda682aeb00000000000000000000000000000000000000000000000000000000815273ffffffffffffffffffffffffffffffffffffffff8a811660048301528981166024830152604482018990529251929091169363da682aeb9360648084019491939192918390030190829087803b158015614acf57600080fd5b505af1158015614ae3573d6000803e3d6000fd5b505050506040513d6020811015614af957600080fd5b505191505b600101614a01565b6040805173ffffffffffffffffffffffffffffffffffffffff85811660248301528416604482015260648082018490528251808303909101815260849091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff167f23b872dd00000000000000000000000000000000000000000000000000000000179052600090614b9d8682614ee3565b9695505050505050565b614baf611a4a565b60408051808201909152601881527f494e49545f414c52454144595f494e495449414c495a4544000000000000000060208201529015614c4b576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b50614c84614c57613850565b7febb05b386a8d34882b8711d156f463690983dc47815980fb82aeeff1aa43579e9063ffffffff614f3116565b565b600080828610614c9957600091506140f4565b83861015614ca9578691506140f4565b614cb9838663ffffffff614d0016565b614cd9614ccc888863ffffffff614d0016565b899063ffffffff614f3516565b811515614ce257fe5b049050614cf5878263ffffffff614d0016565b979650505050505050565b60408051808201909152601281527f4d4154485f5355425f554e444552464c4f5700000000000000000000000000006020820152600090819084841115614da3576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b505050808203805b5092915050565b604080516002808252606080830184529260208301908038833901905050905082816000815181101515614de257fe5b602090810290910101528051829082906001908110614dfd57fe5b6020908102909101015292915050565b60408051808201909152601181527f4d4154485f4144445f4f564552464c4f5700000000000000000000000000000060208201526000908383019084821015612020576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af9565b6000806000806040516020818751602089018a5afa92506000831115614ed757805191505b50909590945092505050565b6000806040516020818551602087016000895af16000811115614f27573d8015614f145760208114614f1d57614f25565b60019350614f25565b600183511493505b505b5090949350505050565b9055565b600080831515614f485760009150614dab565b50828202828482811515614f5857fe5b60408051808201909152601181527f4d4154485f4d554c5f4f564552464c4f5700000000000000000000000000000060208201529291900414612020576040517f08c379a000000000000000000000000000000000000000000000000000000000815260040180806020018281038252838181518152602001915080519060200190808383600083811015610b11578181015183820152602001610af95600a165627a7a723058206758ed1f40e7606a234de7a9ea8f8001848987b858d77ae0f37f6502fa596c180029",
  "devdoc": {
    "methods": {
      "allowRecoverability(address)": {
        "details": "Disable recovery escape hatch for own token,     as the it has the concept of issuing tokens without assigning them"
      },
      "assign(address,uint256)": {
        "params": {
          "_amount": "Number of tokens transferred",
          "_receiver": "The address receiving the tokens"
        }
      },
      "assignVested(address,uint256,uint64,uint64,uint64,bool)": {
        "params": {
          "_amount": "Number of tokens vested",
          "_cliff": "Date when the initial portion of tokens are transferable",
          "_receiver": "The address receiving the tokens, cannot be Token Manager itself",
          "_revokable": "Whether the vesting can be revoked by the Token Manager",
          "_start": "Date the vesting calculations start",
          "_vested": "Date when all tokens are transferable"
        }
      },
      "burn(address,uint256)": {
        "params": {
          "_amount": "Number of tokens being burned",
          "_holder": "Holder of tokens being burned"
        }
      },
      "canPerform(address,bytes32,uint256[])": {
        "details": "Check whether an action can be performed by a sender for a particular role on this app",
        "params": {
          "_params": "Permission params for the role",
          "_role": "Role on this app",
          "_sender": "Sender of the call"
        },
        "return": "Boolean indicating whether the sender has the permissions to perform the action.        Always returns false if the app hasn't been initialized yet."
      },
      "changeTokenController(address)": {
        "params": {
          "_newController": "Address to transfer control of the token"
        }
      },
      "forward(bytes)": {
        "details": "IForwarder interface conformance. Forwards any token holder action.",
        "params": {
          "_evmScript": "Script being executed"
        }
      },
      "forwarderType()": {
        "details": "Tell the forwarder type",
        "return": "Always 1 (ForwarderType.NO_CONTEXT)"
      },
      "getInitializationBlock()": {
        "return": "Block number in which the contract was initialized"
      },
      "getRecoveryVault()": {
        "details": "Get the recovery vault for the app",
        "return": "Recovery vault address for the app"
      },
      "hasInitialized()": {
        "return": "Whether the contract has been initialized by the time of the current block"
      },
      "initialize(address,address,bool,uint256)": {
        "params": {
          "_maxAccountTokens": "Maximum amount of tokens an account can have (0 for infinite tokens)",
          "_token": "MiniMeToken address for the managed token (Token Manager instance must be already set as the token controller)",
          "_transferable": "whether the token can be transferred by holders",
          "_wrappableToken": "Token which can be wrapped/unwrapped to generate an equal number of the MiniMeToken. Set to address(0) to disable."
        }
      },
      "issue(uint256)": {
        "params": {
          "_amount": "Number of tokens minted"
        }
      },
      "mint(address,uint256)": {
        "params": {
          "_amount": "Number of tokens minted",
          "_receiver": "The address receiving the tokens, cannot be the Token Manager itself (use `issue()` instead)"
        }
      },
      "onApprove(address,address,uint256)": {
        "details": "Notifies the controller about an approval allowing the controller to react if desired     Initialization check is implicitly provided by `onlyToken()`.",
        "return": "False if the controller does not authorize the approval"
      },
      "proxyPayment(address)": {
        "details": "Called when ether is sent to the MiniMe Token contract     Initialization check is implicitly provided by `onlyToken()`.",
        "return": "True if the ether is accepted, false for it to throw"
      },
      "registerHook(address)": {
        "params": {
          "_hook": "Contract that will be used as Token Manager hook"
        }
      },
      "revokeHook(uint256)": {
        "params": {
          "_hookId": "Position of the hook to be removed"
        }
      },
      "revokeVesting(address,uint256)": {
        "params": {
          "_holder": "Address whose vesting to revoke",
          "_vestingId": "Numeric id of the vesting"
        }
      },
      "supportsInterface(bytes4)": {
        "details": "Query if a contract implements a certain interface",
        "params": {
          "_interfaceId": "The interface identifier being queried, as specified in ERC-165"
        },
        "return": "True if the contract implements the requested interface and if its not 0xffffffff, false otherwise"
      },
      "transferToVault(address)": {
        "params": {
          "_token": "Token balance to be sent to recovery vault."
        }
      },
      "unwrap(uint256)": {
        "params": {
          "_amount": "Amount of tokens to unwrap"
        }
      },
      "wrap(uint256)": {
        "params": {
          "_amount": "Amount of tokens to wrap"
        }
      }
    }
  },
  "userdoc": {
    "methods": {
      "assign(address,uint256)": {
        "notice": "Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings"
      },
      "assignVested(address,uint256,uint64,uint64,uint64,bool)": {
        "notice": "Assign `@tokenAmount(self.token(): address, _amount, false)` tokens to `_receiver` from the Token Manager's holdings with a `_revokable : 'revokable' : ''` vesting starting at `@formatDate(_start)`, cliff at `@formatDate(_cliff)` (first portion of tokens transferable), and completed vesting at `@formatDate(_vested)` (all tokens transferable)"
      },
      "burn(address,uint256)": {
        "notice": "Burn `@tokenAmount(self.token(): address, _amount, false)` tokens from `_holder`"
      },
      "changeTokenController(address)": {
        "notice": "Change the token controller to `_newController`"
      },
      "forward(bytes)": {
        "notice": "Execute desired action as a token holder"
      },
      "initialize(address,address,bool,uint256)": {
        "notice": "Initialize Token Manager for `_token.symbol(): string`, whose tokens are `_transferable ? '' : 'not'` transferable`_maxAccountTokens > 0 ? ' and limited to a maximum of ' + @tokenAmount(_token, _maxAccountTokens, false) + ' per account' : ''`"
      },
      "issue(uint256)": {
        "notice": "Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for the Token Manager"
      },
      "mint(address,uint256)": {
        "notice": "Mint `@tokenAmount(self.token(): address, _amount, false)` tokens for `_receiver`"
      },
      "registerHook(address)": {
        "notice": "Create a new Token Manager hook for `_hook`"
      },
      "revokeHook(uint256)": {
        "notice": "Revoke Token Manager hook #`_hookId`"
      },
      "revokeVesting(address,uint256)": {
        "notice": "Revoke vesting #`_vestingId` from `_holder`, returning unvested tokens to the Token Manager"
      },
      "transferToVault(address)": {
        "notice": "Send funds to recovery Vault. This contract should never receive funds,        but in case it does, this function allows one to recover them."
      },
      "unwrap(uint256)": {
        "notice": "Unwrap @tokenAmount(self.token(): address, _amount, false) to receive @tokenAmount(self.wrappableToken(): address, _amount, false)"
      },
      "wrap(uint256)": {
        "notice": "Wrap @tokenAmount(self.wrappableToken(): address, _amount, false) to receive @tokenAmount(self.token(): address, _amount, false)"
      }
    }
  }
}